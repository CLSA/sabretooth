define(["site","vacancy"].reduce(function(list,name){return list.concat(cenozoApp.module(name).getRequiredFiles())},[]),function(){"use strict";try{var module=cenozoApp.module("appointment",true)}catch(err){console.warn(err);return}angular.extend(module,{identifier:{parent:[{subject:"interview",column:"interview_id",friendly:"qnaire"},{subject:"participant",column:"participant.uid"}]},name:{singular:"appointment",plural:"appointments",possessive:"appointment's"},columnList:{uid:{column:"participant.uid",type:"string",title:"UID"},start_datetime:{type:"datetime",title:"Date & Time"},duration:{type:"string",title:"Duration"},language:{column:"language.name",type:"string",title:"Language",isIncluded:function($state,model){return"appointment"==model.getSubjectFromState()}},phone:{column:"phone.name",type:"string",title:"Phone Number"},user:{column:"user.name",type:"string",title:"Reserved For"},assignment_user:{column:"assignment_user.name",type:"string",title:"Assigned to"},state:{type:"string",title:"State",help:"Will either be reached, not reached, upcoming, assignable, missed, assigned or in progress"}},defaultOrder:{column:"start_datetime",reverse:true}});module.addInputGroup("",{start_datetime:{title:"Start Date & Time",type:"datetime",constant:true,help:"Set by clicking a vacancy in the calendar below"},duration:{title:"Duration",type:"enum",help:"Not all durations are necessarily available, check the vacancy calendar for details"},participant:{column:"participant.uid",title:"Participant",type:"string",exclude:"add",constant:true},qnaire:{column:"script.name",title:"Questionnaire",type:"string",exclude:"add",constant:true},phone_id:{title:"Phone Number",type:"enum",help:"Which number should be called for the appointment, or leave this field blank if any of the "+"participant's phone numbers can be called."},user_id:{column:"appointment.user_id",title:"Reserved for",type:"lookup-typeahead",typeahead:{table:"user",select:'CONCAT( user.first_name, " ", user.last_name, " (", user.name, ")" )',where:["user.first_name","user.last_name","user.name"]},help:"The user the appointment is specifically reserved for. "+"Cannot be changed once the appointment has passed."},assignment_user:{column:"assignment_user.name",title:"Assigned to",type:"string",exclude:"add",constant:true,help:"This will remain blank until the appointment has been assigned. The assigned user can only be "+" different from the reserved user when the appointment was missed."},state:{title:"State",type:"string",exclude:"add",constant:true,help:"One of reached, not reached, upcoming, assignable, missed, assigned or in progress"}});if(angular.isDefined(cenozoApp.module("participant").actions.notes)){module.addExtraOperation("view",{title:"Notes",operation:function($state,model){$state.go("participant.notes",{identifier:"uid="+model.viewModel.record.participant})}})}["appointment","vacancy"].forEach(function(name){var calendarModule=cenozoApp.module(name);if(angular.isDefined(calendarModule.actions.calendar)){module.addExtraOperation("calendar",{title:calendarModule.subject.snake.replace("_"," ").ucWords(),operation:function($state,model){$state.go(name+".calendar",{identifier:model.site.getIdentifier()})},classes:"appointment"==name?"btn-warning":undefined})}});if(angular.isDefined(module.actions.calendar)){module.addExtraOperation("view",{title:"Appointment Calendar",operation:function($state,model){$state.go("appointment.calendar",{identifier:model.metadata.participantSite.getIdentifier()})}})}function convertDatetime(datetime,timezone,forward){if(angular.isUndefined(forward))forward=false;var date=moment(datetime);var offset=moment.tz.zone(timezone).utcOffset(date.unix());if(date.tz(timezone).isDST())offset+=-60;return forward?moment(datetime).add(offset,"minute"):moment(datetime).subtract(offset,"minute")}function getEventFromAppointment(appointment,timezone){if(angular.isDefined(appointment.start)&&angular.isDefined(appointment.end)){return appointment}else{var identifier=appointment.getIdentifier();var event={getIdentifier:function(){return identifier},title:(angular.isDefined(appointment.uid)?appointment.uid:"new appointment")+(angular.isDefined(appointment.language_code)?" ("+appointment.language_code+")":"")+(angular.isDefined(appointment.qnaire_rank)?" ("+appointment.qnaire_rank+")":"")+(null!=appointment.username?"\nfor "+appointment.username:""),start:convertDatetime(appointment.start_datetime,timezone,false),end:convertDatetime(appointment.end_datetime,timezone,false),help:appointment.help};if(null!=appointment.outcome){if("cancelled"==appointment.outcome)event.className="calendar-event-cancelled";event.textColor="lightgray"}return event}}function vacancyAvailable(oldDatetime,oldDuration,newDatetime,newDuration,cache){var available=true;if("same"==newDatetime)newDatetime=oldDatetime.clone();if("same"==newDuration)newDuration=oldDuration;var oldFromDatetime=null==oldDatetime?null:oldDatetime.clone();var oldToDatetime=null==oldDatetime?null:oldDatetime.clone().add(oldDuration,"minute");var newFromDatetime=newDatetime.clone();var newToDatetime=newDatetime.clone().add(newDuration,"minute");var total=newDuration/30;var found=0;cache.some(function(vacancy){if(vacancy.start.isBetween(newFromDatetime,newToDatetime,"minute","[)")){found++;if(vacancy.start.isBetween(oldFromDatetime,oldToDatetime,"minute","[)")){if(vacancy.appointments>vacancy.operators)available=false}else{if(vacancy.appointments>=vacancy.operators)available=false}}return found==total||!available});return available?found==total:false}cenozo.providers.directive("cnAppointmentAdd",["CnAppointmentModelFactory","CnSession","CnHttpFactory","CnModalConfirmFactory","CnModalMessageFactory","$q",function(CnAppointmentModelFactory,CnSession,CnHttpFactory,CnModalConfirmFactory,CnModalMessageFactory,$q){return{templateUrl:module.getFileUrl("add.tpl.html"),restrict:"E",scope:{model:"=?"},controller:function($scope){if(angular.isUndefined($scope.model))$scope.model=CnAppointmentModelFactory.instance();var cnRecordAddScope=null;$scope.$on("cnRecordAdd ready",function(event,data){cnRecordAddScope=data;var saveFn=cnRecordAddScope.save;cnRecordAddScope.save=function(){var cache=$scope.model.addModel.vacancyModel.calendarModel.cache;var vacancy=null!=cnRecordAddScope.record.start_vacancy_id?cache.findByProperty("id",cnRecordAddScope.record.start_vacancy_id):null;var available=vacancy?vacancyAvailable(null,null,vacancy.start,cnRecordAddScope.record.duration,cache):false;var promiseList=[];var proceed1=true;if(!available){if(2>CnSession.role.tier&&"operator+"!=CnSession.role.name){proceed1=false;CnModalMessageFactory.instance({title:"No Vacancy",message:"The appointment time and duration you have selected is missing vacancy.  You may only "+"create an appointment such that all vacancies have at least one unbooked operator."}).show()}else{var hours=$scope.model.viewModel.record.duration/60;promiseList.push(CnModalConfirmFactory.instance({title:"Overbook Appointment",message:"NOTE: The appointment time and duration you have chosen will require the vacancy "+"calendar to be overbooked!\n\nAre you sure you wish to create the appointment?"}).show().then(function(response){proceed1=response}))}}$q.all(promiseList).then(function(){if(proceed1){CnHttpFactory.instance({path:"interview/"+$scope.model.getParentIdentifier().identifier,data:{select:{column:["missed_appointment"]}}}).get().then(function(response){var proceed2=false;var promise=response.data.missed_appointment?CnModalConfirmFactory.instance({title:"Cancel Missed Appointment?",message:"There already exists a passed appointment for this interview, "+"do you wish to cancel it and create a new one?"}).show().then(function(response){proceed2=response}):$q.all().then(function(){proceed2=true});promise.then(function(){if(proceed2)saveFn()})})}})}});var listener=$scope.$watch("model.addModel.vacancyModel",function(vacancyModel){if(angular.isDefined(vacancyModel)){vacancyModel.calendarModel.settings.dayClick=function(date,event,view){if("interview"!=$scope.model.getSubjectFromState())return;angular.element(this).popover("hide");if(1<CnSession.role.tier||"operator+"==CnSession.role.name){var datetime=convertDatetime(date,CnSession.user.timezone,true);if(!datetime.isAfter(moment())){CnModalMessageFactory.instance({title:"Invalid Appointment Time",message:"The time you have selected is in the past.  You can only create new "+"appointment for a time in the future."}).show()}else{cnRecordAddScope.record.start_datetime=datetime;cnRecordAddScope.formattedRecord.start_datetime=CnSession.formatValue(datetime,"datetime",true);cnRecordAddScope.record.start_vacancy_id=null;$scope.$apply()}}};vacancyModel.calendarModel.settings.eventClick=function(vacancy){if("interview"!=$scope.model.getSubjectFromState())return vacancyModel.getViewEnabled()?vacancyModel.transitionToViewState(vacancy):null;angular.element(this).popover("hide");var datetime=convertDatetime(vacancy.start,CnSession.user.timezone,true);if(!datetime.isAfter(moment())){CnModalMessageFactory.instance({title:"Invalid Appointment Time",message:"The vacancy you have selected is in the past.  You can only create new "+"appointment using a vacancy in the future."}).show()}else if(vacancy.appointments>=vacancy.operators&&2>CnSession.role.tier&&"operator+"!=CnSession.role.name){CnModalMessageFactory.instance({title:"No Vacancy",message:"The start time you have selected does not have any vacancy.  You may only "+"create an appointment using a vacancy which has at least one unbooked operator."}).show()}else{cnRecordAddScope.record.start_datetime=datetime;cnRecordAddScope.formattedRecord.start_datetime=CnSession.formatValue(datetime,"datetime",true);cnRecordAddScope.record.start_vacancy_id=vacancy.id;$scope.$apply()}};listener()}})}}}]);cenozo.providers.directive("cnAppointmentCalendar",["CnAppointmentModelFactory","CnVacancyModelFactory","CnSession",function(CnAppointmentModelFactory,CnVacancyModelFactory,CnSession){return{templateUrl:module.getFileUrl("calendar.tpl.html"),restrict:"E",scope:{model:"=?",preventSiteChange:"@"},controller:function($scope){if(angular.isUndefined($scope.model))$scope.model=CnAppointmentModelFactory.instance();$scope.model.calendarModel.heading=$scope.model.site.name.ucWords()+" Appointment Calendar"},link:function(scope){var factoryList={appointment:CnAppointmentModelFactory,vacancy:CnVacancyModelFactory};scope.$watch("model.calendarModel.currentDate",function(date){Object.keys(factoryList).filter(function(name){return angular.isDefined(cenozoApp.moduleList[name].actions.calendar)}).forEach(function(name){var calendarModel=factoryList[name].forSite(scope.model.site).calendarModel;if(!calendarModel.currentDate.isSame(date,"day"))calendarModel.currentDate=date})});scope.$watch("model.calendarModel.currentView",function(view){Object.keys(factoryList).filter(function(name){return angular.isDefined(cenozoApp.moduleList[name].actions.calendar)}).forEach(function(name){var calendarModel=factoryList[name].forSite(scope.model.site).calendarModel;if(calendarModel.currentView!=view)calendarModel.currentView=view})})}}}]);cenozo.providers.directive("cnAppointmentList",["CnAppointmentModelFactory","CnSession",function(CnAppointmentModelFactory,CnSession){return{templateUrl:module.getFileUrl("list.tpl.html"),restrict:"E",scope:{model:"=?"},controller:function($scope){if(angular.isUndefined($scope.model))$scope.model=CnAppointmentModelFactory.instance()}}}]);cenozo.providers.directive("cnAppointmentView",["CnAppointmentModelFactory","CnSession","CnModalConfirmFactory","CnModalMessageFactory","$q",function(CnAppointmentModelFactory,CnSession,CnModalConfirmFactory,CnModalMessageFactory,$q){return{templateUrl:module.getFileUrl("view.tpl.html"),restrict:"E",scope:{model:"=?"},controller:function($scope){if(angular.isUndefined($scope.model))$scope.model=CnAppointmentModelFactory.instance();var cnRecordViewScope=null;$scope.$on("cnRecordView ready",function(event,data){cnRecordViewScope=data;var patchFn=cnRecordViewScope.patch;cnRecordViewScope.patch=function(property){var promiseList=[];var proceed=true;if("duration"==property){var available=vacancyAvailable(convertDatetime($scope.model.viewModel.record.start_datetime,CnSession.user.timezone,false),$scope.model.viewModel.backupRecord.duration,"same",$scope.model.viewModel.record.duration,$scope.model.viewModel.vacancyModel.calendarModel.cache);if(!available){if(2>CnSession.role.tier&&"operator+"!=CnSession.role.name){return CnModalMessageFactory.instance({title:"No Vacancy",message:"The duration you have selected is missing vacancy.  You may only set an "+"appointment's duration such that all vacancies have at least one unbooked operator."}).show()}else{var hours=$scope.model.viewModel.record.duration/60;var message="NOTE: The duration you have chosen will require the vacancy calendar to "+"be overbooked!\n\nAre you sure you wish to change the appointment's duration to "+hours.toFixed(1)+" hours?";promiseList.push(CnModalConfirmFactory.instance({title:(available?"Change":"Overbook")+" Appointment",message:message}).show().then(function(response){proceed=response}))}}}return $q.all(promiseList).then(function(){if(proceed)patchFn(property);else $scope.model.viewModel.record[property]=$scope.model.viewModel.backupRecord[property]})}});if($scope.model.getEditEnabled()){var listener=$scope.$watch("model.viewModel.vacancyModel",function(vacancyModel){if(angular.isDefined(vacancyModel)){vacancyModel.calendarModel.settings.dayClick=function(date,event,view){if("appointment"!=$scope.model.getSubjectFromState())return;angular.element(this).popover("hide");if(1<CnSession.role.tier||"operator+"==CnSession.role.name){var datetime=convertDatetime(date,CnSession.user.timezone,true);if(!datetime.isAfter(moment())){CnModalMessageFactory.instance({title:"Invalid Appointment Time",message:"The time you have selected is in the past.  You can only change the "+"appointment's start time to a time in the future."}).show()}else{CnModalConfirmFactory.instance({title:"Overbook Appointment",message:"NOTE: The time you have chosen will require the vacancy calendar to be "+"overbooked!\n\nAre you sure you wish to change the appointment's start "+"time to "+CnSession.formatValue(datetime,"datetime",true)+"?"}).show().then(function(response){if(response){$scope.model.viewModel.record.start_datetime=datetime;$scope.model.viewModel.formattedRecord.start_datetime=CnSession.formatValue(datetime,"datetime",true);$scope.model.viewModel.record.start_vacancy_id=null;cnRecordViewScope.patch("start_datetime")}})}}};vacancyModel.calendarModel.settings.eventClick=function(vacancy){if("appointment"!=$scope.model.getSubjectFromState())return vacancyModel.getViewEnabled()?vacancyModel.transitionToViewState(vacancy):null;angular.element(this).popover("hide");var datetime=convertDatetime(vacancy.start,CnSession.user.timezone,true);if(moment($scope.model.viewModel.record.start_datetime).isSame(datetime,"minute")){}else if(!datetime.isAfter(moment())){CnModalMessageFactory.instance({title:"Invalid Appointment Time",message:"The vacancy you have selected is in the past.  You can only change the "+"appointment's start time to a vacancy in the future."}).show()}else{var available=vacancyAvailable(convertDatetime($scope.model.viewModel.record.start_datetime,CnSession.user.timezone,false),$scope.model.viewModel.record.duration,moment(vacancy.start),"same",vacancyModel.calendarModel.cache);if(!available&&2>CnSession.role.tier&&"operator+"!=CnSession.role.name){CnModalMessageFactory.instance({title:"No Vacancy",message:"The start time you have selected does not have any vacancy.  You may only set an "+"appointment's start time to a vacancy which has at least one unbooked operator."}).show()}else{var message=(available?"":"NOTE: The time you have chosen will require the "+"vacancy calendar to be overbooked!\n\n")+"Are you sure you wish to change the appointment's start time to "+CnSession.formatValue(datetime,"datetime",true)+"?";CnModalConfirmFactory.instance({title:(available?"Change":"Overbook")+" Appointment",message:message}).show().then(function(response){if(response){$scope.model.viewModel.record.start_datetime=datetime;$scope.model.viewModel.formattedRecord.start_datetime=CnSession.formatValue(datetime,"datetime",true);$scope.model.viewModel.record.start_vacancy_id=vacancy.id;cnRecordViewScope.patch("start_vacancy_id")}})}}};listener()}})}}}}]);cenozo.providers.factory("CnAppointmentAddFactory",["CnBaseAddFactory","CnSession","CnHttpFactory","CnVacancyModelFactory","$q",function(CnBaseAddFactory,CnSession,CnHttpFactory,CnVacancyModelFactory,$q){var object=function(parentModel){var self=this;CnBaseAddFactory.construct(this,parentModel);this.onAdd=function(record){return this.$$onAdd(record).then(function(){CnHttpFactory.instance({path:"appointment/"+record.id}).get().then(function(response){var newRecord=angular.copy(response.data);newRecord.getIdentifier=function(){return parentModel.getIdentifierFromRecord(newRecord)};parentModel.calendarModel.cache.push(getEventFromAppointment(newRecord,CnSession.user.timezone))})})};this.onNew=function(record){var parent=parentModel.getParentIdentifier();return CnHttpFactory.instance({path:[parent.subject,parent.identifier].join("/"),data:{select:{column:{column:"participant_id"}}}}).query().then(function(response){return $q.all([CnHttpFactory.instance({path:["participant",response.data.participant_id].join("/"),data:{select:{column:[{table:"site",column:"id",alias:"site_id"},{table:"site",column:"name"}]}}}).get().then(function(response){parentModel.metadata.getPromise().then(function(){parentModel.metadata.participantSite=CnSession.siteList.findByProperty("id",response.data.site_id);self.vacancyModel=CnVacancyModelFactory.forSite(parentModel.metadata.participantSite)})}),CnHttpFactory.instance({path:["participant",response.data.participant_id,"phone"].join("/"),data:{select:{column:["id","rank","type","number"]},modifier:{where:{column:"phone.active",operator:"=",value:true},order:{rank:false}}}}).query().then(function(response){parentModel.metadata.getPromise().then(function(){parentModel.metadata.columnList.phone_id.enumList=[];response.data.forEach(function(item){parentModel.metadata.columnList.phone_id.enumList.push({value:item.id,name:"("+item.rank+") "+item.type+": "+item.number})})})})]).then(function(){return self.$$onNew(record)})})}};return{instance:function(parentModel){return new object(parentModel)}}}]);cenozo.providers.factory("CnAppointmentCalendarFactory",["CnBaseCalendarFactory","CnSession",function(CnBaseCalendarFactory,CnSession){var object=function(parentModel){var self=this;CnBaseCalendarFactory.construct(this,parentModel);delete this.settings.dayClick;this.onCalendar=function(replace,minDate,maxDate,ignoreParent){var loadMinDate=self.getLoadMinDate(replace,minDate);var loadMaxDate=self.getLoadMaxDate(replace,maxDate);return self.$$onCalendar(replace,minDate,maxDate,ignoreParent).then(function(){self.cache.forEach(function(item,index,array){array[index]=getEventFromAppointment(item,CnSession.user.timezone)})})}};return{instance:function(parentModel){return new object(parentModel)}}}]);cenozo.providers.factory("CnAppointmentListFactory",["CnBaseListFactory",function(CnBaseListFactory){var object=function(parentModel){var self=this;CnBaseListFactory.construct(this,parentModel);this.onDelete=function(record){return this.$$onDelete(record).then(function(){parentModel.calendarModel.cache=parentModel.calendarModel.cache.filter(function(e){return e.getIdentifier()!=record.getIdentifier()})})}};return{instance:function(parentModel){return new object(parentModel)}}}]);cenozo.providers.factory("CnAppointmentViewFactory",["CnBaseViewFactory","CnSession","CnHttpFactory","CnVacancyModelFactory","$q",function(CnBaseViewFactory,CnSession,CnHttpFactory,CnVacancyModelFactory,$q){var object=function(parentModel,root){var self=this;CnBaseViewFactory.construct(this,parentModel,root);this.onDelete=function(){return this.$$onDelete().then(function(){parentModel.calendarModel.cache=parentModel.calendarModel.cache.filter(function(e){return e.getIdentifier()!=self.record.getIdentifier()})})};this.onPatch=function(data){return self.$$onPatch(data).then(function(){self.vacancyModel.calendarModel.onCalendar(true);var cnRecordCalendar=cenozo.getScopeByQuerySelector(".record-calendar");if(null!=cnRecordCalendar)cnRecordCalendar.refresh();parentModel.calendarModel.cache.some(function(e,index,array){if(e.getIdentifier()==self.record.getIdentifier()){array[index]=getEventFromAppointment(self.record,CnSession.user.timezone);return true}})})};this.onView=function(force){return this.$$onView(force).then(function(){var upcoming=moment().isBefore(self.record.start_datetime,"minute");parentModel.getDeleteEnabled=function(){return"vacancy"!=parentModel.getSubjectFromState()&&parentModel.$$getDeleteEnabled()&&upcoming};parentModel.getEditEnabled=function(){return parentModel.$$getEditEnabled()&&upcoming};return CnHttpFactory.instance({path:"interview/"+self.record.interview_id,data:{select:{column:{column:"participant_id"}}}}).query().then(function(response){return $q.all([CnHttpFactory.instance({path:["participant",response.data.participant_id].join("/"),data:{select:{column:[{table:"site",column:"id",alias:"site_id"},{table:"site",column:"name"}]}}}).get().then(function(response){parentModel.metadata.participantSite=CnSession.siteList.findByProperty("id",response.data.site_id);self.vacancyModel=CnVacancyModelFactory.forSite(parentModel.metadata.participantSite)}),CnHttpFactory.instance({path:["participant",response.data.participant_id,"phone"].join("/"),data:{select:{column:["id","rank","type","number"]},modifier:{where:{column:"phone.active",operator:"=",value:true},order:{rank:false}}}}).query().then(function(response){parentModel.metadata.getPromise().then(function(){parentModel.metadata.columnList.phone_id.enumList=[];response.data.forEach(function(item){parentModel.metadata.columnList.phone_id.enumList.push({value:item.id,name:"("+item.rank+") "+item.type+": "+item.number})})})})])})})}};return{instance:function(parentModel,root){return new object(parentModel,root)}}}]);cenozo.providers.factory("CnAppointmentModelFactory",["CnBaseModelFactory","CnAppointmentAddFactory","CnAppointmentCalendarFactory","CnAppointmentListFactory","CnAppointmentViewFactory","CnSession","CnHttpFactory","$state",function(CnBaseModelFactory,CnAppointmentAddFactory,CnAppointmentCalendarFactory,CnAppointmentListFactory,CnAppointmentViewFactory,CnSession,CnHttpFactory,$state){var object=function(site){if(!angular.isObject(site)||angular.isUndefined(site.id))throw new Error("Tried to create CnAppointmentModel without specifying the site.");var self=this;CnBaseModelFactory.construct(this,module);this.addModel=CnAppointmentAddFactory.instance(this);this.calendarModel=CnAppointmentCalendarFactory.instance(this);this.listModel=CnAppointmentListFactory.instance(this);this.viewModel=CnAppointmentViewFactory.instance(this,site.id==CnSession.site.id);this.site=site;this.getServiceData=function(type,columnRestrictLists){var data=this.$$getServiceData(type,columnRestrictLists);if("calendar"==type)data.restricted_site_id=self.site.id;return data};this.getAddEnabled=function(){var subject=this.getSubjectFromState();var action=this.getActionFromState();return!("appointment"==subject&&"list"==action)&&"vacancy"!=subject&&angular.isDefined(module.actions.add)};this.getDeleteEnabled=function(){return this.$$getDeleteEnabled()&&"vacancy"!=this.getSubjectFromState()};this.getMetadata=function(){return this.$$getMetadata().then(function(){angular.extend(self.metadata.columnList,{start_datetime:{required:true},duration:{required:true,default:60,enumList:[{value:30,name:"0.5 hours"},{value:60,name:"1.0 hours"},{value:90,name:"1.5 hours"},{value:120,name:"2.0 hours"},{value:150,name:"2.5 hours"},{value:180,name:"3.0 hours"},{value:210,name:"3.5 hours"},{value:240,name:"4.0 hours"}]}})})};this.getTypeaheadData=function(input,viewValue){var data=this.$$getTypeaheadData(input,viewValue);if("user"==input.typeahead.table){data.modifier.where.unshift({bracket:true,open:true});data.modifier.where.push({bracket:true,open:false});data.modifier.where.push({column:"user.active",operator:"=",value:true});if(this.site)data.restricted_site_id=this.site.id}return data}};var siteModule=cenozoApp.module("site");var siteColumn=angular.isDefined(siteModule.identifier.column)?siteModule.identifier.column:"id";return{siteInstanceList:{},userInstanceList:{},forSite:function(site){if(!angular.isObject(site)){$state.go("error.404");throw new Error('Cannot find site matching identifier "'+site+'", redirecting to 404.')}if(angular.isUndefined(this.siteInstanceList[site.id])){if(angular.isUndefined(site.getIdentifier))site.getIdentifier=function(){return siteColumn+"="+this[siteColumn]};this.siteInstanceList[site.id]=new object(site)}return this.siteInstanceList[site.id]},forUser:function(user){if(!angular.isObject(user)){$state.go("error.404");throw new Error('Cannot find user matching identifier "'+user+'", redirecting to 404.')}if(angular.isUndefined(this.userInstanceList[user.id])){var site=CnSession.site;if(angular.isUndefined(site.getIdentifier))site.getIdentifier=function(){return siteColumn+"="+this[siteColumn]};this.userInstanceList[user.id]=new object(site)}return this.userInstanceList[user.id]},instance:function(){var site=null;if("calendar"==$state.current.name.split(".")[1]){if(angular.isDefined($state.params.identifier)){var identifier=$state.params.identifier.split("=");if(2==identifier.length)site=CnSession.siteList.findByProperty(identifier[0],identifier[1])}}else{site=CnSession.site}return this.forSite(site)}}}])});
