{##
 # base_list.twig
 # 
 # Generic list widget.
 # @author Patrick Emond <emondpd@mcmaster.ca>
 # @param boolean checkable Whether the list should allow items to be selected.
 # @param boolean viewable Whether the list should allow items to be viewed.
 # @param boolean addable Whether the list should allow items to be added.
 # @param boolean removable Whether the list should allow items to be removed.
 # @param int items_per_page The maximum number of items to show at once.
 # @param array columns An array of columns.  Every item in the array must have the following:
 #                   'id' => a unique id identifying the column
 #                   'name' => the name to display in in the column header
 #                   'sortable' => whether or not the list can be sorted by the column
 #                   'align' => right|center|left alignment (center is default)
 # @param array rows An array of items.  Every item in the array must have the following:
 #                   'id' => a unique identifying id
 #                   'columns' => an array of values for each column listed in the columns array
 # @param int number_of_items The total number of items (not visible, total).
 # @param int page The page to display.
 # @param string sort_column The column id to sort by (use an empty string for no sorting)
 # @param int sort_desc Whether to sort descending or ascending
 # @param array restrictions An array of restrictions.  Every item in the array must have:
 #                   'id' => a unique id identifying the restricted column
 #                   'compare' => what type of comparison to make
 #                   'value' => the value to test against
 # @param int max_page The maximum number of pages possible given the total number of items.
 #}
{% extends "widget.twig" %}

{% block javascript %}

  <script type="text/javascript">
    $( function() {
      // make button icons
      $( "button.{{ widget.full }}_sortable.{{ widget.full }}_unsorted" ).button( {
        text: true,
        icons: { primary: "ui-icon-triangle-2-n-s" }
      } );
      $( "button.{{ widget.full }}_sortable.{{ widget.full }}_sorted" ).button( {
        text: true,
        icons: { primary: "ui-icon-triangle-1-s" }
      } );
      $( "button.{{ widget.full }}_sortable.{{ widget.full }}_sorted_desc" ).button( {
        text: true,
        icons: { primary: "ui-icon-triangle-1-n" }
      } );
      $( "button.{{ widget.full }}_remove_restriction" ).button( {
        text: true,
        icons: { primary: "ui-icon-closethick" }
      } );

      {% if viewable %}
        $( "button.{{ widget.full }}_view" ).button( {
          text: false,
          icons: { primary: "ui-icon-document" }
        } );
      {% endif %}

      {% if removable %}
        $( "button.{{ widget.full }}_remove" ).button( {
          text: false,
          icons: { primary: "ui-icon-closethick" }
        } );
      {% endif %}

      {% if addable %}
        $( "#{{ widget.full }}_add" ).button( {
          text: false,
          icons: { primary: "ui-icon-plusthick" }
        } );
      
        // set the correct colspan in the table's footer
        var colspan = $( ".{{ widget.full }}_table > thead > tr > th" ).length;
        $( "#{{ widget.full }}_footer_cell" ).attr( "colspan", colspan - 1 );
      {% endif %}

      // highlight the row the mouse is over
      $(".{{ widget.full }}_table tbody tr").mouseover( function() {
        $(this).addClass( "ui-widget-header" );
      } );
      $(".{{ widget.full }}_table tbody tr").mouseout( function() {
        $(this).removeClass( "ui-widget-header" );
      } );
    
      {% if viewable %}
        // view buttons
        $( ".{{ widget.full }}_view" ).click( function() {
          var id_string = $(this).attr( 'id' );
          var id = parseInt( id_string.substring( id_string.lastIndexOf('_') + 1 ) );
          slot_load( {{ slot }}, "{{ widget.subject }}", "view", { "id": id } );
        } );
      {% endif %}
    
      {% if removable %}
        // remove buttons
        $( ".{{ widget.full }}_remove" ).click( function() {
          var id_string = $(this).attr( 'id' );
          var id = parseInt( id_string.substring( id_string.lastIndexOf('_') + 1 ) );
          
          {% if parent.exists %}
            var args = new Object();
            args.id = {{ parent.id }};
            args.remove_id = id;
            confirm_dialog(
              "Remove {{ widget.subject_name }}?",
              "Are you sure you want to remove the {{ widget.subject_name }} " +
              "from the {{ parent.subject }}?",
              function() {
                if( ajax_push( "{{ parent.subject }}", "delete_{{ widget.subject }}", args ) ) {
                  {% if widget.subject == "access" %}slot_refresh( "settings" );{% endif %}
                  slot_refresh( {{ slot }} );
                }
              }
            );
          {% else %}
            confirm_dialog(
              "Delete {{ widget.subject_name }}?",
              "Are you sure you want to delete the {{ widget.subject_name }}?",
              function() {
                if( ajax_push( "{{ widget.subject }}", "delete", { "id": id } ) ) {
                  {% if widget.subject == "access" %}slot_refresh( "settings" );{% endif %}
                  slot_refresh( {{ slot }} );
                }
              }
            );
          {% endif %}
        } );
      {% endif %}

      {% if addable %}
        // add button
        $( "#{{ widget.full }}_add" ).click( function() {
          {% if parent.exists %}
            slot_load( {{ slot }}, "{{ parent.subject }}", "add_{{ widget.subject }}",
                       { "id": {{ parent.id }} } );
          {% else %}
            slot_load( {{ slot }}, "{{ widget.subject }}", "add" );
          {% endif %}
        } );
      {% endif %}
    
      {% if checkable %}
        // get the checked id object from the cookies
        var json_checked_ids = $.cookie( "{{ widget.compound }}_checked_ids" );
        var checked_ids = undefined == json_checked_ids
                        ? new Object()
                        : jQuery.parseJSON( json_checked_ids );
          
        // on page load, set check button states based on its cookie
        $( ".{{ widget.full }}_check" ).each( function() {
          if( checked_ids[ $(this).attr( "id" ) ] ) $(this).attr( "checked", "checked" );
        } );
      
        // on change to a checkbox, set check button cookie
        $( ".{{ widget.full }}_check" ).change( function() {
          // add or remove the checkbox id to the object and replace the old cookie
          if( $(this).attr( "checked" ) ) checked_ids[ $(this).attr( "id" ) ] = true;
          else delete checked_ids[ $(this).attr( "id" ) ];
          $.cookie( "{{ widget.compound }}_checked_ids", JSON.stringify( checked_ids ) );
        } );
      
        // on clicking the "check all" button, check all (visible) checkboxes and set their cookies
        $( "#{{ widget.full }}_check_all" ).click( function() {
          $( ".{{ widget.full }}_check" ).each( function() {
            $(this).attr( "checked", true );
            checked_ids[ $(this).attr( "id" ) ] = true;
          } );
      
          // replace the old cookie
          $.cookie( "{{ widget.compound }}_checked_ids", JSON.stringify( checked_ids ) );
        } );
      
        // uncheck all (visible) checkboxes and set their cookies as well
        $( "#{{ widget.full }}_check_none" ).click( function() {
          $( ".{{ widget.full }}_check" ).each( function() {
            $(this).attr( "checked", false );
            delete checked_ids[ $(this).attr( "id" ) ];
          } );
          
          // replace the old cookie
          $.cookie( "{{ widget.compound }}_checked_ids", JSON.stringify( checked_ids ) );
        } );
      
        // uncheck all (visible) checkboxes and set their cookies as well
        $( "#{{ widget.full }}_check_invert" ).click( function() {
          $( ".{{ widget.full }}_check" ).each( function() {
            var old = $(this).attr( "checked" );
            $(this).attr( "checked", !old );
            if( !old ) checked_ids[ $(this).attr( "id" ) ] = true;
            else delete checked_ids[ $(this).attr( "id" ) ];
          } );
      
          // replace the old cookie
          $.cookie( "{{ widget.compound }}_checked_ids", JSON.stringify( checked_ids ) );
        } );
      
        // clear out all checked items (visible or not)
        $( "#{{ widget.full }}_check_clear" ).click( function() {
          $( ".{{ widget.full }}_check" ).each( function() {
            $(this).attr( "checked", false );
          } );
      
          // reset the checked ids cookie
          checked_ids = new Object();
          $.cookie( "{{ widget.compound }}_checked_ids", JSON.stringify( checked_ids ) );
        } );
      
        // create button set
        $( "#{{ widget.full }}_check_none" ).button().parent().buttonset();
      {% endif %}
    
      // column sorting and restricting
      $header_buttons = $( "button.{{ widget.full }}_sortable" );
      $header_buttons.noContext();
    
      // left-clicking a header button sorts by that column
      $header_buttons.click( function() {
        var sort_column = $(this).parent( "th" ).attr("id");
        var args = new Object();
        {% if parent.exists %}
          args.{{ parent.full }} = { "id": {{ parent.id }} };
          args.{{ widget.full }} = {
            "sort_column": sort_column,
            "sort_desc": "{{ sort_column }}" == sort_column ? {{ sort_desc ? 0 : 1 }} : 0
          };
          slot_load( {{ slot }}, "{{ parent.subject }}", "{{ parent.name }}", args, true );
        {% else %}
          args.sort_column = sort_column;
          args.sort_desc = "{{ sort_column }}" == sort_column ? {{ sort_desc ? 0 : 1 }} : 0;
          slot_load( {{ slot }}, "{{ widget.subject }}", "{{ widget.name }}", args );
        {% endif %}
      } );
    
      // right-clicking a header button adds a new restriction
      $header_buttons.rightClick( function( event ) {
        var column = $(this).parent( "th" ).attr( "id" );
        var column_name = $(this).button().text();
        $( "#{{ widget.compound }}__restrict_dialog_label" ).html( column_name );
        $( "#{{ widget.compound }}__restrict_dialog_id" ).val( column );
        $( "#{{ widget.compound }}__restrict_dialog_value" ).val( "" );
        $( "#{{ widget.compound }}__restrict_dialog" ).dialog( "open" );
        $( "#{{ widget.compound }}__restrict_dialog" ).parent().keypress( function(e) {
          if( ( e.which && e.which == 13 ) || ( e.keyCode && e.keyCode == 13 ) ) {
            $(this).find( "button" ).eq(0).click();
            return false;
          }
        } );
      } );
      
      // left-clicking a restriction button removes it
      $( "button.{{ widget.full }}_remove_restriction" ).click( function() {
        // create the restrictions array
        var restrictions = new Object();
        {% for id, restrict in restrictions %}
          var column = $(this).parent( "th" ).attr( "id" );
          restrictions["{{ id }}"] = {
            compare: "{{ id }}" == column ? "" : "{{ restrict.compare }}",
            value: "{{ id }}" == column ? "" : "{{ restrict.value }}"
          };
        {% endfor %}
        
        var args = new Object();
        {% if parent.exists %}
          args.{{ parent.full }} = { "id": {{ parent.id }} };
          args.{{ widget.full }} = { "restrictions": restrictions };
          slot_load( {{ slot }}, "{{ parent.subject }}", "{{ parent.name }}", args, true );
        {% else %}
          args.restrictions = restrictions;
          slot_load( {{ slot }}, "{{ widget.subject }}", "{{ widget.name }}", args );
        {% endif %}
      } );

      // the add-restriction dialog
      $( "#{{ widget.compound }}__restrict_dialog" ).dialog( {
        title: "Restrict list",
        autoOpen: false,
        height: 150,
        width: 450,
        modal: true,
        buttons: {
          Ok: function() {
            // create the restrictions array
            var restrictions = new Object();
            {% for id, restrict in restrictions %}
              restrictions["{{ id }}"] = {
                compare: "{{ restrict.compare }}",
                value: "{{ restrict.value }}"
              };
            {% endfor %}
            restrictions[$( "#{{ widget.compound }}__restrict_dialog_id" ).val()] = {
              compare: $( "#{{ widget.compound }}__restrict_dialog_compare" ).val(),
              value: $( "#{{ widget.compound }}__restrict_dialog_value" ).val()
            };
    
            var args = new Object();
            {% if parent.exists %}
              args.{{ parent.full }} = { "id": {{ parent.id }} };
              args.{{ widget.full }} = { "restrictions": restrictions };
              slot_load( {{ slot }}, "{{ parent.subject }}", "{{ parent.name }}", args, true );
            {% else %}
              args.restrictions = restrictions;
              slot_load( {{ slot }}, "{{ widget.subject }}", "{{ widget.name }}", args );
            {% endif %}
    
            $(this).dialog( "close" );
          },
          Cancel: function() {
            $(this).dialog( "close" );
          }
        }
      } );

      {% if items_per_page < number_of_items %}
        // previous page button
        $( "#{{ widget.full }}_page_prev" ).click( function() {
          var args = new Object();
          {% if parent.exists %}
            args.{{ parent.full }} = { "id": {{ parent.id }} };
            args.{{ widget.full }} = { "page": {{ page - 1 }} };
            slot_load( {{ slot }}, "{{ parent.subject }}", "{{ parent.name }}", args, true );
          {% else %}
            args.page = {{ page - 1 }};
            slot_load( {{ slot }}, "{{ widget.subject }}", "{{ widget.name }}", args );
          {% endif %}
        } );
      
        // next page button
        $( "#{{ widget.full }}_page_next" ).click( function() {
          var args = new Object();
          {% if parent.exists %}
            args.{{ parent.full }} = { "id": {{ parent.id }} };
            args.{{ widget.full }} = { "page": {{ page + 1 }} };
            slot_load( {{ slot }}, "{{ parent.subject }}", "{{ parent.name }}", args, true );
          {% else %}
            args.page = {{ page + 1 }};
            slot_load( {{ slot }}, "{{ widget.subject }}", "{{ widget.name }}", args );
          {% endif %}
        } );
      
        // create a button set
        $( "#{{ widget.full }}_page_next" ).button().parent().buttonset();
      {% endif %}
    } );
  </script>

{% endblock javascript %}

{% block widget %}

  <div id="{{ widget.compound }}__restrict_dialog">
    <form>
      <input type="hidden" id="{{ widget.compound }}__restrict_dialog_id" value="" />
      <table>
        <tr>
          <td style="white-space:nowrap;">
            <div id="{{ widget.compound }}__restrict_dialog_label">Value</div>
          </td>
          <td>
            <select id="{{ widget.compound }}__restrict_dialog_compare">
              <option selected>is</option>
              <option>is not</option>
              <option>like</option>
              <option>not like</option>
            </select>
          </td>
          <td width="95%">
            <input type="text" id="{{ widget.compound }}__restrict_dialog_value" value=""
                   class="text ui-widget-content ui-corner-all" style="width:100%" />
          </td>
        </tr>
      </table>
    </form>
  </div>
  
  <table class="{{ widget.full }}_table">
    <thead class="ui-widget-header">
      <tr id="#{{ widget.full }}_header_row">
        {% if checkable %}
          <th align="center"><div class="ui-icon ui-icon-check" style="padding:2px"></div></th>
        {% endif %}
        {% for column_id, column in columns %}
          {% if column.sortable|default(false) %}
            <th id="{{ column_id }}" style="vertical-align:top;">
              <button class="{{ widget.full }}_sortable
                {% if column_id == sort_column %}
                  {{ widget.full }}_sorted{{ sort_desc ? '_desc' : '' }}
                {% else %}
                  {{ widget.full }}_unsorted
                {% endif %}
              ">{{ column.heading }}</button>
              {% for restrict_id, restrict in restrictions %}
                {% if restrict_id == column_id %}
                  <br />
                  <button class="{{ widget.full }}_remove_restriction">
                    {{ restrict.compare }} {{ restrict.value }}
                  </button>
                {% endif %}
              {% endfor %}
            </th>
          {% else %}
            <th style="padding:0.5em">{{ column.heading }}</th>
          {% endif %}
        {% endfor %}
        
        {% block header_button_columns %}{% endblock %}

        {% if viewable %}
          <th width="1%"></th>
        {% endif %}
  
        {% if removable %}
          <th width="1%"></th>
        {% endif %}
      </tr>
    </thead>
    {% if rows|count %}
      <tbody>
        {% for row in rows %}
          <tr>
            {% if checkable %}
              <td>
                <input type="checkbox"
                       class="{{ widget.full }}_check"
                       id="{{ widget.compound }}_check_{{ row.id }}" />
              </td>
            {% endif %}
            {% for column_id, column in columns %}
              <td {% if column.align|default(false) %}align="{{ column.align }}"{% endif %}
                  style="font-weight: normal; padding-top:0.2em; padding-bottom:0.2em;">
              {% if 'text' == column.type %}
                {% autoescape false %}{{ row.columns[column_id] }}{% endautoescape %}
              {% else %} {# no other column types require special formatting #}
                {{ row.columns[column_id] }}
              {% endif %}
              </td>
            {% endfor %}

            {% block button_columns %}{% endblock %}

            {% if viewable %}
              <td>
                <button class="{{ widget.full }}_view"
                        id="{{ widget.full }}_view_{{ row.id }}">view</button>
              </td>
            {% endif %}
            {% if removable %}
              <td>
                <button class="{{ widget.full }}_remove"
                        id="{{ widget.full }}_remove_{{ row.id }}">
                  remove{% if parent.exists %} from {{ parent.subject }}{% endif %}
                </button>
              </td>
            {% endif %}
          </tr>
        {% endfor %}
      </tbody>
    {% endif %}
    <tfoot class="ui-widget-header">
      <tr>
        <th id="{{ widget.full }}_footer_cell" colspan="0">
          {% if checkable %}
            <span>
              Check boxes:
              <button style="width:80px" id="{{ widget.full }}_check_all">all</button>
              <button style="width:80px" id="{{ widget.full }}_check_none">none</button>
              <button style="width:80px" id="{{ widget.full }}_check_invert">invert</button>
              <button style="width:80px" id="{{ widget.full }}_check_clear">clear</button>
            </span>
            <span style="margin-left:20px"></span>
          {% endif %}

          {% if rows|count %}
            {% set item_from = ( page - 1 ) * items_per_page + 1 %}
            {% set item_to = item_from + rows|count - 1 %}
            Viewing: {{ item_from }} to {{ item_to }} of {{ number_of_items }}
          {% else %}
            No {{ widget.subject_names }} found.
          {% endif %}

          {% if items_per_page < number_of_items %}
            <span style="margin-left:20px"></span>
            <span>
              Page:
              <button style="width:80px"
                      id="{{ widget.full }}_page_prev"
                      {{ 1 == page ? 'disabled' : '' }}>prev</button>
              <button style="width:80px"
                      id="{{ widget.full }}_page_next"
                      {{ max_page == page ? 'disabled' : '' }}>next</button>
            </span>
          {% endif %}
        </th>
        {% if addable %}
          <th><button id="{{ widget.full }}_add">
            add {{ widget.subject_name }}{% if parent.exists %} to {{ parent.subject }}{% endif %}
          </button></th>
        {% endif %}
      </tr>
    </tfoot>
  </table>

{% endblock widget %}
