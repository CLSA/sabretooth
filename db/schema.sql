-- MySQL Script generated by MySQL Workbench
-- Tue 12 Mar 2024 12:27:42 PM
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='';

-- -----------------------------------------------------
-- Schema cenozo
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema cenozo
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `cenozo` DEFAULT CHARACTER SET utf8 COLLATE utf8_bin ;
-- -----------------------------------------------------
-- Schema sabretooth
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema sabretooth
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `sabretooth` DEFAULT CHARACTER SET utf8mb4 ;
USE `cenozo` ;

-- -----------------------------------------------------
-- Table `cenozo`.`activity`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`activity` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` INT(10) UNSIGNED NOT NULL,
  `application_id` INT(10) UNSIGNED NOT NULL,
  `site_id` INT(10) UNSIGNED NOT NULL,
  `role_id` INT(10) UNSIGNED NOT NULL,
  `start_datetime` DATETIME NOT NULL,
  `end_datetime` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_activity_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_activity_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_activity_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_activity_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`address`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`address` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `alternate_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `participant_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `rank` INT(11) NOT NULL,
  `international` TINYINT(1) NOT NULL DEFAULT 0,
  `address1` VARCHAR(512) NOT NULL,
  `address2` VARCHAR(512) NULL DEFAULT NULL,
  `city` VARCHAR(100) NOT NULL,
  `region_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `postcode` VARCHAR(10) NULL DEFAULT NULL,
  `international_region` VARCHAR(100) NULL DEFAULT NULL,
  `international_country_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `timezone_offset` FLOAT NOT NULL DEFAULT 0,
  `daylight_savings` TINYINT(1) NOT NULL DEFAULT 0,
  `january` TINYINT(1) NOT NULL DEFAULT 1,
  `february` TINYINT(1) NOT NULL DEFAULT 1,
  `march` TINYINT(1) NOT NULL DEFAULT 1,
  `april` TINYINT(1) NOT NULL DEFAULT 1,
  `may` TINYINT(1) NOT NULL DEFAULT 1,
  `june` TINYINT(1) NOT NULL DEFAULT 1,
  `july` TINYINT(1) NOT NULL DEFAULT 1,
  `august` TINYINT(1) NOT NULL DEFAULT 1,
  `september` TINYINT(1) NOT NULL DEFAULT 1,
  `october` TINYINT(1) NOT NULL DEFAULT 1,
  `november` TINYINT(1) NOT NULL DEFAULT 1,
  `december` TINYINT(1) NOT NULL DEFAULT 1,
  `note` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_alternate_id_participant_id_rank` (`alternate_id` ASC, `participant_id` ASC, `rank` ASC),
  INDEX `fk_region_id` (`region_id` ASC),
  INDEX `dk_city` (`city` ASC),
  INDEX `dk_postcode` (`postcode` ASC),
  INDEX `fk_alternate_id` (`alternate_id` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_international_country_id` (`international_country_id` ASC),
  CONSTRAINT `fk_address_alternate_id`
    FOREIGN KEY (`alternate_id`)
    REFERENCES `cenozo`.`alternate` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_address_international_country_id`
    FOREIGN KEY (`international_country_id`)
    REFERENCES `cenozo`.`country` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_address_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_address_region`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`alternate`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`alternate` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `language_id` INT(10) UNSIGNED NOT NULL,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `association` VARCHAR(45) NULL DEFAULT NULL,
  `email` VARCHAR(255) NULL DEFAULT NULL,
  `email_datetime` DATETIME NULL DEFAULT NULL,
  `email_old` VARCHAR(255) NULL DEFAULT NULL,
  `email2` VARCHAR(255) NULL DEFAULT NULL,
  `email2_datetime` DATETIME NULL DEFAULT NULL,
  `email2_old` VARCHAR(255) NULL DEFAULT NULL,
  `global_note` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_language_id` (`language_id` ASC),
  CONSTRAINT `fk_alternate_language_id`
    FOREIGN KEY (`language_id`)
    REFERENCES `cenozo`.`language` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_alternate_participant`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`alternate_consent`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`alternate_consent` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `alternate_id` INT(10) UNSIGNED NOT NULL,
  `alternate_consent_type_id` INT(10) UNSIGNED NOT NULL,
  `accept` TINYINT(1) NOT NULL,
  `written` TINYINT(1) NOT NULL,
  `datetime` DATETIME NOT NULL,
  `note` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_alternate_id` (`alternate_id` ASC),
  INDEX `fk_alternate_consent_type_id` (`alternate_consent_type_id` ASC),
  INDEX `dk_datetime` (`datetime` ASC),
  CONSTRAINT `fk_alternate_consent_alternate_consent_type_id`
    FOREIGN KEY (`alternate_consent_type_id`)
    REFERENCES `cenozo`.`alternate_consent_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_alternate_consent_alternate_id`
    FOREIGN KEY (`alternate_id`)
    REFERENCES `cenozo`.`alternate` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`alternate_consent_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`alternate_consent_type` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(100) NOT NULL,
  `description` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`alternate_first_address`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`alternate_first_address` (
  `alternate_id` INT(10) UNSIGNED NOT NULL,
  `address_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`alternate_id`),
  INDEX `fk_address_id` (`address_id` ASC),
  CONSTRAINT `fk_alternate_first_address_address_id`
    FOREIGN KEY (`address_id`)
    REFERENCES `cenozo`.`address` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_alternate_first_address_alternate_id`
    FOREIGN KEY (`alternate_id`)
    REFERENCES `cenozo`.`alternate` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`alternate_has_alternate_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`alternate_has_alternate_type` (
  `alternate_id` INT(10) UNSIGNED NOT NULL,
  `alternate_type_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`alternate_id`, `alternate_type_id`),
  INDEX `fk_alternate_type_id` (`alternate_type_id` ASC),
  INDEX `fk_alternate_id` (`alternate_id` ASC),
  CONSTRAINT `fk_alternate_has_alternate_type_alternate_id`
    FOREIGN KEY (`alternate_id`)
    REFERENCES `cenozo`.`alternate` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_alternate_has_alternate_type_alternate_type_id`
    FOREIGN KEY (`alternate_type_id`)
    REFERENCES `cenozo`.`alternate_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`alternate_last_alternate_consent`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`alternate_last_alternate_consent` (
  `alternate_id` INT(10) UNSIGNED NOT NULL,
  `alternate_consent_type_id` INT(10) UNSIGNED NOT NULL,
  `alternate_consent_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`alternate_id`, `alternate_consent_type_id`),
  INDEX `fk_alternate_consent_type_id` (`alternate_consent_type_id` ASC),
  INDEX `fk_alternate_consent_id` (`alternate_consent_id` ASC),
  CONSTRAINT `fk_alternate_last_alternate_consent_alternate_consent_id`
    FOREIGN KEY (`alternate_consent_id`)
    REFERENCES `cenozo`.`alternate_consent` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `fk_alternate_last_alternate_consent_alternate_consent_type_id`
    FOREIGN KEY (`alternate_consent_type_id`)
    REFERENCES `cenozo`.`alternate_consent_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_alternate_last_alternate_consent_alternate_id`
    FOREIGN KEY (`alternate_id`)
    REFERENCES `cenozo`.`alternate` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`alternate_last_written_alternate_consent`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`alternate_last_written_alternate_consent` (
  `alternate_id` INT(10) UNSIGNED NOT NULL,
  `alternate_consent_type_id` INT(10) UNSIGNED NOT NULL,
  `alternate_consent_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`alternate_id`, `alternate_consent_type_id`),
  INDEX `fk_alternate_consent_type_id` (`alternate_consent_type_id` ASC),
  INDEX `fk_alternate_consent_id` (`alternate_consent_id` ASC),
  CONSTRAINT `fk_alternate_last_w_alternate_consent_alternate_consent_id`
    FOREIGN KEY (`alternate_consent_id`)
    REFERENCES `cenozo`.`alternate_consent` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `fk_alternate_last_w_alternate_consent_alternate_consent_type_id`
    FOREIGN KEY (`alternate_consent_type_id`)
    REFERENCES `cenozo`.`alternate_consent_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_alternate_last_w_alternate_consent_alternate_id`
    FOREIGN KEY (`alternate_id`)
    REFERENCES `cenozo`.`alternate` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`alternate_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`alternate_type` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(45) NOT NULL,
  `title` VARCHAR(255) NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  UNIQUE INDEX `uq_title` (`title` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`application`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`application` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(45) NOT NULL,
  `title` VARCHAR(45) NOT NULL,
  `application_type_id` INT(10) UNSIGNED NOT NULL,
  `url` VARCHAR(511) NOT NULL,
  `version` VARCHAR(45) NOT NULL,
  `cenozo` VARCHAR(45) NOT NULL,
  `release_based` TINYINT(1) NOT NULL DEFAULT 1,
  `release_event_type_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `site_based` TINYINT(1) NOT NULL DEFAULT 0,
  `update_queue` TINYINT(1) NOT NULL DEFAULT 0,
  `country_id` INT(10) UNSIGNED NOT NULL,
  `timezone` VARCHAR(45) NOT NULL DEFAULT 'Canada/Eastern',
  `primary_color` CHAR(7) NOT NULL DEFAULT '#3f3f7d',
  `secondary_color` CHAR(7) NOT NULL DEFAULT '#9ba8b7',
  `theme_expired` TINYINT(1) NOT NULL DEFAULT 1,
  `study_phase_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `login_footer` MEDIUMTEXT NULL DEFAULT NULL,
  `mail_name` VARCHAR(255) NULL DEFAULT NULL,
  `mail_address` VARCHAR(127) NULL DEFAULT NULL,
  `mail_header` MEDIUMTEXT NULL DEFAULT NULL,
  `mail_footer` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  INDEX `fk_release_event_type_id` (`release_event_type_id` ASC),
  INDEX `fk_application_type_id` (`application_type_id` ASC),
  INDEX `fk_study_phase_id` (`study_phase_id` ASC),
  CONSTRAINT `fk_application_application_type_id`
    FOREIGN KEY (`application_type_id`)
    REFERENCES `cenozo`.`application_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_release_event_type_id`
    FOREIGN KEY (`release_event_type_id`)
    REFERENCES `cenozo`.`event_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_study_phase_id`
    FOREIGN KEY (`study_phase_id`)
    REFERENCES `cenozo`.`study_phase` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`application_has_cohort`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`application_has_cohort` (
  `application_id` INT(10) UNSIGNED NOT NULL,
  `cohort_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `grouping` ENUM('region', 'jurisdiction') NOT NULL DEFAULT 'region',
  PRIMARY KEY (`application_id`, `cohort_id`),
  INDEX `fk_cohort_id` (`cohort_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_application_has_cohort_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_has_cohort_cohort_id`
    FOREIGN KEY (`cohort_id`)
    REFERENCES `cenozo`.`cohort` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`application_has_collection`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`application_has_collection` (
  `application_id` INT(10) UNSIGNED NOT NULL,
  `collection_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`application_id`, `collection_id`),
  INDEX `fk_collection_id` (`collection_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_application_has_collection_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_application_has_collection_collection_id`
    FOREIGN KEY (`collection_id`)
    REFERENCES `cenozo`.`collection` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`application_has_participant`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`application_has_participant` (
  `application_id` INT(10) UNSIGNED NOT NULL,
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `preferred_site_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `datetime` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`application_id`, `participant_id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_preferred_site_id` (`preferred_site_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_application_has_participant_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_has_participant_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_has_participant_preferred_site_id`
    FOREIGN KEY (`preferred_site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`application_has_script`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`application_has_script` (
  `application_id` INT(10) UNSIGNED NOT NULL,
  `script_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`application_id`, `script_id`),
  INDEX `fk_script_id` (`script_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_application_has_script_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_has_script_script_id`
    FOREIGN KEY (`script_id`)
    REFERENCES `cenozo`.`script` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`application_has_site`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`application_has_site` (
  `application_id` INT(10) UNSIGNED NOT NULL,
  `site_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`application_id`, `site_id`),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_application_has_site_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_has_site_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`application_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`application_type` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`application_type_has_overview`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`application_type_has_overview` (
  `application_type_id` INT(10) UNSIGNED NOT NULL,
  `overview_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`application_type_id`, `overview_id`),
  INDEX `fk_overview_id` (`overview_id` ASC),
  INDEX `fk_application_type_id` (`application_type_id` ASC),
  CONSTRAINT `fk_application_type_has_overview_application_type_id`
    FOREIGN KEY (`application_type_id`)
    REFERENCES `cenozo`.`application_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_application_type_has_overview_overview_id`
    FOREIGN KEY (`overview_id`)
    REFERENCES `cenozo`.`overview` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`application_type_has_report_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`application_type_has_report_type` (
  `application_type_id` INT(10) UNSIGNED NOT NULL,
  `report_type_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`application_type_id`, `report_type_id`),
  INDEX `fk_report_type_id` (`report_type_id` ASC),
  INDEX `fk_application_type_id` (`application_type_id` ASC),
  CONSTRAINT `fk_application_type_has_report_type_application_type_id`
    FOREIGN KEY (`application_type_id`)
    REFERENCES `cenozo`.`application_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_type_has_report_type_report_type_id`
    FOREIGN KEY (`report_type_id`)
    REFERENCES `cenozo`.`report_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`application_type_has_role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`application_type_has_role` (
  `application_type_id` INT(10) UNSIGNED NOT NULL,
  `role_id` INT(10) UNSIGNED NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`application_type_id`, `role_id`),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_application_type_id` (`application_type_id` ASC),
  CONSTRAINT `fk_application_type_has_role_application_type_id`
    FOREIGN KEY (`application_type_id`)
    REFERENCES `cenozo`.`application_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_application_type_has_role_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`availability`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`availability` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `monday` TINYINT(1) NOT NULL DEFAULT 0,
  `tuesday` TINYINT(1) NOT NULL DEFAULT 0,
  `wednesday` TINYINT(1) NOT NULL DEFAULT 0,
  `thursday` TINYINT(1) NOT NULL DEFAULT 0,
  `friday` TINYINT(1) NOT NULL DEFAULT 0,
  `saturday` TINYINT(1) NOT NULL DEFAULT 0,
  `sunday` TINYINT(1) NOT NULL DEFAULT 0,
  `start_time` TIME NOT NULL,
  `end_time` TIME NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `dk_start_time` (`start_time` ASC),
  INDEX `dk_end_time` (`end_time` ASC),
  CONSTRAINT `fk_availability_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`availability_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`availability_type` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(25) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`cohort`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`cohort` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`collection`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`collection` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(100) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `locked` TINYINT(1) NOT NULL DEFAULT 0,
  `description` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`collection_has_participant`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`collection_has_participant` (
  `collection_id` INT(10) UNSIGNED NOT NULL,
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`collection_id`, `participant_id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_collection_id` (`collection_id` ASC),
  CONSTRAINT `fk_collection_has_participant_collection_id`
    FOREIGN KEY (`collection_id`)
    REFERENCES `cenozo`.`collection` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_collection_has_participant_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`consent`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`consent` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `consent_type_id` INT(10) UNSIGNED NOT NULL,
  `accept` TINYINT(1) NOT NULL,
  `written` TINYINT(1) NOT NULL DEFAULT 0,
  `datetime` DATETIME NOT NULL,
  `note` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `dk_date` (`datetime` ASC),
  INDEX `fk_consent_type_id` (`consent_type_id` ASC),
  CONSTRAINT `fk_consent_consent_type_id`
    FOREIGN KEY (`consent_type_id`)
    REFERENCES `cenozo`.`consent_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_consent_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`consent_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`consent_type` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(100) NOT NULL,
  `description` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`country`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`country` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`event`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`event` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `event_type_id` INT(10) UNSIGNED NOT NULL,
  `site_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `user_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_participant_id_event_type_id_datetime` (`participant_id` ASC, `event_type_id` ASC, `datetime` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `dk_datetime` (`datetime` ASC),
  INDEX `fk_event_type_id` (`event_type_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  CONSTRAINT `fk_event_event_type_id`
    FOREIGN KEY (`event_type_id`)
    REFERENCES `cenozo`.`event_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`event_address`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`event_address` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `event_id` INT(10) UNSIGNED NOT NULL,
  `address_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `international` TINYINT(1) NOT NULL DEFAULT 0,
  `address1` VARCHAR(512) NOT NULL,
  `address2` VARCHAR(512) NULL DEFAULT NULL,
  `city` VARCHAR(100) NOT NULL,
  `region_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `postcode` VARCHAR(10) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_event_id` (`event_id` ASC),
  INDEX `fk_address_id` (`address_id` ASC),
  INDEX `fk_region_id` (`region_id` ASC),
  CONSTRAINT `fk_event_address_address_id`
    FOREIGN KEY (`address_id`)
    REFERENCES `cenozo`.`address` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_address_event_id`
    FOREIGN KEY (`event_id`)
    REFERENCES `cenozo`.`event` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_address_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`event_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`event_type` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(100) NOT NULL,
  `record_address` TINYINT(1) NOT NULL DEFAULT 0,
  `description` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`exclusion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`exclusion` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(100) NOT NULL,
  `description` VARCHAR(512) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`export`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`export` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `application_id` INT(10) UNSIGNED NOT NULL,
  `title` VARCHAR(255) NOT NULL,
  `user_id` INT(10) UNSIGNED NOT NULL,
  `description` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_application_id_title` (`application_id` ASC, `title` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_export_application_id` (`application_id` ASC),
  CONSTRAINT `fk_export_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_export_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`export_column`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`export_column` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `export_id` INT(10) UNSIGNED NOT NULL,
  `table_name` VARCHAR(45) NOT NULL,
  `subtype` VARCHAR(45) NULL DEFAULT NULL,
  `column_name` VARCHAR(45) NOT NULL,
  `rank` INT(10) UNSIGNED NOT NULL,
  `include` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_export_id_rank` (`export_id` ASC, `rank` ASC),
  INDEX `dk_table_name_subtype` (`table_name` ASC, `subtype` ASC),
  INDEX `fk_export_id` (`export_id` ASC),
  CONSTRAINT `fk_export_column_export_id`
    FOREIGN KEY (`export_id`)
    REFERENCES `cenozo`.`export` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`export_file`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`export_file` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `export_id` INT(10) UNSIGNED NOT NULL,
  `user_id` INT(10) UNSIGNED NOT NULL,
  `size` BIGINT(20) NULL DEFAULT NULL,
  `stage` ENUM('started', 'reading data', 'writing data', 'completed', 'failed') NOT NULL,
  `progress` FLOAT NOT NULL DEFAULT 0,
  `datetime` DATETIME NOT NULL,
  `elapsed` FLOAT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `dk_datetime` (`datetime` ASC),
  INDEX `fk_export_id` (`export_id` ASC),
  CONSTRAINT `fk_export_file_export_id`
    FOREIGN KEY (`export_id`)
    REFERENCES `cenozo`.`export` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_export_file_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`export_restriction`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`export_restriction` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `export_id` INT(10) UNSIGNED NOT NULL,
  `table_name` VARCHAR(45) NOT NULL,
  `subtype` VARCHAR(45) NULL DEFAULT NULL,
  `column_name` VARCHAR(45) NOT NULL,
  `rank` INT(10) UNSIGNED NOT NULL,
  `logic` ENUM('or', 'and') NOT NULL,
  `test` ENUM('<=>', '<>', '<', '>', 'like', 'not like') NOT NULL,
  `value` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_export_id_rank` (`export_id` ASC, `rank` ASC),
  INDEX `dk_table_name_subtype` (`table_name` ASC, `subtype` ASC),
  INDEX `fk_export_id` (`export_id` ASC),
  CONSTRAINT `fk_export_restriction_export_id`
    FOREIGN KEY (`export_id`)
    REFERENCES `cenozo`.`export` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`failed_login`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`failed_login` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `user_id` INT(10) UNSIGNED NOT NULL,
  `application_id` INT(10) UNSIGNED NOT NULL,
  `address` VARCHAR(45) NOT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_failed_login_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_failed_login_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`form`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`form` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `form_type_id` INT(10) UNSIGNED NOT NULL,
  `date` DATE NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_participant_id_form_type_id_date` (`participant_id` ASC, `form_type_id` ASC, `date` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_form_type_id` (`form_type_id` ASC),
  CONSTRAINT `fk_form_form_type_id`
    FOREIGN KEY (`form_type_id`)
    REFERENCES `cenozo`.`form_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_form_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`form_association`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`form_association` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `form_id` INT(10) UNSIGNED NOT NULL,
  `subject` VARCHAR(45) NOT NULL,
  `record_id` INT(10) UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_form_id_subject_record_id` (`form_id` ASC, `subject` ASC, `record_id` ASC),
  INDEX `fk_form_id` (`form_id` ASC),
  INDEX `dk_record_id` (`record_id` ASC),
  CONSTRAINT `fk_form_association_form_id`
    FOREIGN KEY (`form_id`)
    REFERENCES `cenozo`.`form` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`form_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`form_type` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(45) NOT NULL,
  `title` VARCHAR(100) NOT NULL,
  `description` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`hin`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`hin` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `code` VARCHAR(45) NOT NULL,
  `region_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_participant_id_datetime` (`participant_id` ASC, `datetime` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_region_id` (`region_id` ASC),
  CONSTRAINT `fk_hin_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_hin_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`hold`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`hold` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `hold_type_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `datetime` DATETIME NOT NULL,
  `user_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `site_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `role_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `application_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `note` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_participant_id_datetime` (`participant_id` ASC, `datetime` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_hold_type_id` (`hold_type_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_hold_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_hold_hold_type_id`
    FOREIGN KEY (`hold_type_id`)
    REFERENCES `cenozo`.`hold_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_hold_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_hold_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_hold_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_hold_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`hold_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`hold_type` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `type` ENUM('final', 'temporary') NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `system` TINYINT(1) NOT NULL DEFAULT 0,
  `description` VARCHAR(512) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_type_name` (`type` ASC, `name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`identifier`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`identifier` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(255) NOT NULL,
  `locked` TINYINT(1) NOT NULL DEFAULT 0,
  `regex` VARCHAR(255) NULL DEFAULT NULL,
  `description` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`language`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`language` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(45) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 0,
  `code` CHAR(2) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  UNIQUE INDEX `uq_code` (`code` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`mail`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`mail` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `from_name` VARCHAR(255) NULL DEFAULT NULL,
  `from_address` VARCHAR(127) NOT NULL,
  `to_name` VARCHAR(255) NULL DEFAULT NULL,
  `to_address` VARCHAR(127) NOT NULL,
  `cc_address` VARCHAR(255) NULL DEFAULT NULL,
  `bcc_address` VARCHAR(255) NULL DEFAULT NULL,
  `schedule_datetime` DATETIME NOT NULL,
  `sent_datetime` DATETIME NULL DEFAULT NULL,
  `sent` TINYINT(1) NULL DEFAULT NULL,
  `subject` VARCHAR(255) NOT NULL,
  `body` MEDIUMTEXT NOT NULL,
  `note` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_participant_id_scheduled_datetime` (`participant_id` ASC, `schedule_datetime` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  CONSTRAINT `fk_mail_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`next_of_kin`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`next_of_kin` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `first_name` VARCHAR(45) NULL DEFAULT NULL,
  `last_name` VARCHAR(45) NULL DEFAULT NULL,
  `gender` VARCHAR(10) NULL DEFAULT NULL,
  `phone` VARCHAR(100) NULL DEFAULT NULL,
  `street` VARCHAR(255) NULL DEFAULT NULL,
  `city` VARCHAR(100) NULL DEFAULT NULL,
  `province` VARCHAR(45) NULL DEFAULT NULL,
  `postal_code` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_participant_id` (`participant_id` ASC),
  CONSTRAINT `fk_next_of_kin_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`note`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`note` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `alternate_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `participant_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `user_id` INT(10) UNSIGNED NOT NULL,
  `sticky` TINYINT(1) NOT NULL DEFAULT 0,
  `datetime` DATETIME NOT NULL,
  `note` MEDIUMTEXT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `dk_sticky_datetime` (`sticky` ASC, `datetime` ASC),
  INDEX `fk_alternate_id` (`alternate_id` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  CONSTRAINT `fk_note_alternate_id`
    FOREIGN KEY (`alternate_id`)
    REFERENCES `cenozo`.`alternate` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_note_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_note_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`opal_form_template`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`opal_form_template` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(255) NOT NULL,
  `description` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`overview`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`overview` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(45) NOT NULL,
  `title` VARCHAR(255) NOT NULL,
  `description` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`participant`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`participant` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `uid` VARCHAR(45) NOT NULL COMMENT 'External unique ID',
  `source_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `cohort_id` INT(10) UNSIGNED NOT NULL,
  `grouping` VARCHAR(45) NULL DEFAULT NULL,
  `honorific` VARCHAR(10) NOT NULL DEFAULT '',
  `first_name` VARCHAR(45) NOT NULL,
  `other_name` VARCHAR(100) NULL DEFAULT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `sex` ENUM('male', 'female') NOT NULL,
  `current_sex` ENUM('male', 'female') NOT NULL,
  `date_of_birth` DATE NULL DEFAULT NULL,
  `date_of_death_accuracy` ENUM('full date known', 'day unknown', 'month and day unknown') NULL DEFAULT NULL,
  `date_of_death_ministry` TINYINT(1) NULL DEFAULT NULL,
  `date_of_death` DATE NULL DEFAULT NULL,
  `exclusion_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `language_id` INT(10) UNSIGNED NOT NULL,
  `availability_type_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `callback` DATETIME NULL DEFAULT NULL,
  `override_stratum` TINYINT(1) NOT NULL DEFAULT 0,
  `email` VARCHAR(255) NULL DEFAULT NULL,
  `email_datetime` DATETIME NULL DEFAULT NULL,
  `email_old` VARCHAR(255) NULL DEFAULT NULL,
  `email2` VARCHAR(255) NULL DEFAULT NULL,
  `email2_datetime` DATETIME NULL DEFAULT NULL,
  `email2_old` VARCHAR(255) NULL DEFAULT NULL,
  `mass_email` TINYINT(1) NOT NULL DEFAULT 1,
  `delink` TINYINT(1) NOT NULL DEFAULT 0,
  `withdraw_third_party` TINYINT(1) NULL DEFAULT NULL,
  `out_of_area` TINYINT(1) NOT NULL DEFAULT 0,
  `low_education` TINYINT(1) NOT NULL DEFAULT 0,
  `global_note` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_uid` (`uid` ASC),
  INDEX `dk_uid` (`uid` ASC),
  INDEX `fk_cohort_id` (`cohort_id` ASC),
  INDEX `fk_source_id` (`source_id` ASC),
  INDEX `dk_email_datetime` (`email_datetime` ASC),
  INDEX `fk_language_id` (`language_id` ASC),
  INDEX `fk_availability_type_id` (`availability_type_id` ASC),
  INDEX `dk_callback` (`callback` ASC),
  INDEX `fk_exclusion_id` (`exclusion_id` ASC),
  CONSTRAINT `fk_participant_availability_type_id`
    FOREIGN KEY (`availability_type_id`)
    REFERENCES `cenozo`.`availability_type` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_cohort_id`
    FOREIGN KEY (`cohort_id`)
    REFERENCES `cenozo`.`cohort` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_exclusion_id`
    FOREIGN KEY (`exclusion_id`)
    REFERENCES `cenozo`.`exclusion` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_language_id`
    FOREIGN KEY (`language_id`)
    REFERENCES `cenozo`.`language` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_source_id`
    FOREIGN KEY (`source_id`)
    REFERENCES `cenozo`.`source` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_first_address`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`participant_first_address` (
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `address_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`participant_id`),
  INDEX `fk_address_id` (`address_id` ASC),
  CONSTRAINT `fk_participant_first_address_address_id`
    FOREIGN KEY (`address_id`)
    REFERENCES `cenozo`.`address` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_first_address_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_identifier`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`participant_identifier` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `identifier_id` INT(10) UNSIGNED NOT NULL,
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `value` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_identifier_id_participant_id` (`identifier_id` ASC, `participant_id` ASC),
  UNIQUE INDEX `uq_identifier_id_value` (`identifier_id` ASC, `value` ASC),
  INDEX `fk_identifier_id` (`identifier_id` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  CONSTRAINT `fk_participant_identifier_identifier_id`
    FOREIGN KEY (`identifier_id`)
    REFERENCES `cenozo`.`identifier` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_identifier_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_last_consent`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`participant_last_consent` (
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `consent_type_id` INT(10) UNSIGNED NOT NULL DEFAULT 0,
  `consent_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`participant_id`, `consent_type_id`),
  INDEX `fk_consent_id` (`consent_id` ASC),
  INDEX `fk_participant_last_consent_consent_type_id` (`consent_type_id` ASC),
  CONSTRAINT `fk_participant_last_consent_consent_id`
    FOREIGN KEY (`consent_id`)
    REFERENCES `cenozo`.`consent` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_consent_consent_type_id`
    FOREIGN KEY (`consent_type_id`)
    REFERENCES `cenozo`.`consent_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_consent_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_last_event`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`participant_last_event` (
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `event_type_id` INT(10) UNSIGNED NOT NULL,
  `event_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`participant_id`, `event_type_id`),
  INDEX `fk_event_type_id` (`event_type_id` ASC),
  INDEX `fk_event_id` (`event_id` ASC),
  CONSTRAINT `fk_participant_last_event_event_id`
    FOREIGN KEY (`event_id`)
    REFERENCES `cenozo`.`event` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_last_event_event_type_id`
    FOREIGN KEY (`event_type_id`)
    REFERENCES `cenozo`.`event_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_event_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_last_hin`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`participant_last_hin` (
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `hin_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`participant_id`),
  INDEX `fk_hin_id` (`hin_id` ASC),
  CONSTRAINT `fk_participant_last_hin_hin_id`
    FOREIGN KEY (`hin_id`)
    REFERENCES `cenozo`.`hin` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_last_hin_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_last_hold`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`participant_last_hold` (
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `hold_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`participant_id`),
  INDEX `fk_hold_id` (`hold_id` ASC),
  CONSTRAINT `fk_participant_last_hold_hold_id`
    FOREIGN KEY (`hold_id`)
    REFERENCES `cenozo`.`hold` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_hold_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_last_proxy`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`participant_last_proxy` (
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `proxy_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`participant_id`),
  INDEX `fk_proxy_id` (`proxy_id` ASC),
  CONSTRAINT `fk_participant_last_proxy_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_proxy_proxy_id`
    FOREIGN KEY (`proxy_id`)
    REFERENCES `cenozo`.`proxy` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_last_trace`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`participant_last_trace` (
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `trace_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`participant_id`),
  INDEX `fk_trace_id` (`trace_id` ASC),
  CONSTRAINT `fk_participant_last_trace_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_trace_trace_id`
    FOREIGN KEY (`trace_id`)
    REFERENCES `cenozo`.`trace` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_last_written_consent`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`participant_last_written_consent` (
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `consent_type_id` INT(10) UNSIGNED NOT NULL DEFAULT 0,
  `consent_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`participant_id`, `consent_type_id`),
  INDEX `fk_consent_id` (`consent_id` ASC),
  INDEX `fk_participant_last_written_consent_consent_type_id` (`consent_type_id` ASC),
  CONSTRAINT `fk_participant_last_written_consent_consent_id`
    FOREIGN KEY (`consent_id`)
    REFERENCES `cenozo`.`consent` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_written_consent_consent_type_id`
    FOREIGN KEY (`consent_type_id`)
    REFERENCES `cenozo`.`consent_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_last_written_consent_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_primary_address`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`participant_primary_address` (
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `address_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`participant_id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_address_id` (`address_id` ASC),
  CONSTRAINT `fk_participant_primary_address_address_id`
    FOREIGN KEY (`address_id`)
    REFERENCES `cenozo`.`address` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_primary_address_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_site`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`participant_site` (
  `application_id` INT(10) UNSIGNED NOT NULL,
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `site_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `default_site_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`application_id`, `participant_id`),
  INDEX `fk_application_id` (`application_id` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_default_site_id` (`default_site_id` ASC),
  CONSTRAINT `fk_participant_site_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_site_default_site_id`
    FOREIGN KEY (`default_site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_site_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_participant_site_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`phone`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`phone` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `alternate_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `participant_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `address_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `rank` INT(11) NOT NULL,
  `international` TINYINT(1) NOT NULL DEFAULT 0,
  `type` ENUM('home', 'home2', 'work', 'work2', 'mobile', 'mobile2', 'other', 'other2') NOT NULL,
  `number` VARCHAR(127) NOT NULL,
  `note` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_alternate_id_participant_id_rank` (`alternate_id` ASC, `participant_id` ASC, `rank` ASC),
  INDEX `fk_address_id` (`address_id` ASC),
  INDEX `fk_alternate_id` (`alternate_id` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  CONSTRAINT `fk_phone_address`
    FOREIGN KEY (`address_id`)
    REFERENCES `cenozo`.`address` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_phone_alternate_id`
    FOREIGN KEY (`alternate_id`)
    REFERENCES `cenozo`.`alternate` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_phone_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`postcode`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`postcode` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(7) NOT NULL COMMENT 'Postcodes with the same province, tz and dst are grouped.',
  `region_id` INT(10) UNSIGNED NOT NULL,
  `timezone_offset` FLOAT NOT NULL,
  `daylight_savings` TINYINT(1) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  INDEX `fk_region_id` (`region_id` ASC),
  CONSTRAINT `fk_postcode_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`proxy`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`proxy` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `proxy_type_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `datetime` DATETIME NOT NULL,
  `user_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `site_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `role_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `application_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `note` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_participant_id_datetime` (`participant_id` ASC, `datetime` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_proxy_type_id` (`proxy_type_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_proxy_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_proxy_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_proxy_proxy_type_id`
    FOREIGN KEY (`proxy_type_id`)
    REFERENCES `cenozo`.`proxy_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_proxy_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_proxy_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_proxy_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`proxy_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`proxy_type` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(100) NOT NULL,
  `description` VARCHAR(512) NOT NULL,
  `prompt` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`region`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`region` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(45) NOT NULL,
  `abbreviation` VARCHAR(5) NOT NULL,
  `country_id` INT(10) UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  UNIQUE INDEX `uq_abbreviation` (`abbreviation` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`report`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`report` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `report_type_id` INT(10) UNSIGNED NOT NULL,
  `report_schedule_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `user_id` INT(10) UNSIGNED NOT NULL,
  `application_id` INT(10) UNSIGNED NOT NULL,
  `site_id` INT(10) UNSIGNED NOT NULL,
  `role_id` INT(10) UNSIGNED NOT NULL,
  `format` ENUM('CSV', 'Excel', 'LibreOffice') NOT NULL DEFAULT 'CSV',
  `size` BIGINT(20) UNSIGNED NULL DEFAULT NULL,
  `stage` ENUM('started', 'reading data', 'writing data', 'completed', 'failed') NOT NULL DEFAULT 'started',
  `progress` FLOAT NOT NULL DEFAULT 0,
  `datetime` DATETIME NOT NULL,
  `elapsed` FLOAT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_report_type_id` (`report_type_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  INDEX `fk_report_schedule_id` (`report_schedule_id` ASC),
  INDEX `dk_datetime` (`datetime` ASC),
  INDEX `dk_stage` (`stage` ASC),
  INDEX `dk_size` (`size` ASC),
  CONSTRAINT `fk_report_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_report_schedule_id`
    FOREIGN KEY (`report_schedule_id`)
    REFERENCES `cenozo`.`report_schedule` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_report_type_id`
    FOREIGN KEY (`report_type_id`)
    REFERENCES `cenozo`.`report_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`report_has_report_restriction`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`report_has_report_restriction` (
  `report_id` INT(10) UNSIGNED NOT NULL,
  `report_restriction_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `value` MEDIUMTEXT NOT NULL,
  PRIMARY KEY (`report_id`, `report_restriction_id`),
  INDEX `fk_report_restriction_id` (`report_restriction_id` ASC),
  INDEX `fk_report_id` (`report_id` ASC),
  CONSTRAINT `fk_report_has_report_restriction_report_id`
    FOREIGN KEY (`report_id`)
    REFERENCES `cenozo`.`report` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_has_report_restriction_report_restriction_id`
    FOREIGN KEY (`report_restriction_id`)
    REFERENCES `cenozo`.`report_restriction` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`report_restriction`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`report_restriction` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `report_type_id` INT(10) UNSIGNED NOT NULL,
  `rank` INT(11) NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `title` VARCHAR(45) NOT NULL,
  `mandatory` TINYINT(1) NOT NULL DEFAULT 0,
  `null_allowed` TINYINT(1) NOT NULL DEFAULT 0,
  `restriction_type` ENUM('table', 'identifier_list', 'string', 'integer', 'decimal', 'date', 'datetime', 'time', 'boolean', 'enum') NOT NULL,
  `custom` TINYINT(1) NOT NULL DEFAULT 0,
  `subject` VARCHAR(45) NULL DEFAULT NULL,
  `operator` ENUM('=', '<=>', '!=', '<>', '<', '<=', '>', '>=') NULL DEFAULT NULL,
  `enum_list` VARCHAR(511) NULL DEFAULT NULL,
  `description` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_report_type_id_name` (`report_type_id` ASC, `name` ASC),
  UNIQUE INDEX `uq_report_type_id_rank` (`report_type_id` ASC, `rank` ASC),
  INDEX `fk_report_type_id` (`report_type_id` ASC),
  CONSTRAINT `fk_report_restriction_report_type_id`
    FOREIGN KEY (`report_type_id`)
    REFERENCES `cenozo`.`report_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`report_schedule`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`report_schedule` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `report_type_id` INT(10) UNSIGNED NOT NULL,
  `user_id` INT(10) UNSIGNED NOT NULL,
  `application_id` INT(10) UNSIGNED NOT NULL,
  `site_id` INT(10) UNSIGNED NOT NULL,
  `role_id` INT(10) UNSIGNED NOT NULL,
  `schedule` ENUM('daily', 'weekly', 'monthly') NOT NULL,
  `format` ENUM('CSV', 'Excel', 'LibreOffice') NOT NULL DEFAULT 'CSV',
  PRIMARY KEY (`id`),
  INDEX `fk_report_type_id` (`report_type_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `dk_repeat` (`schedule` ASC),
  CONSTRAINT `fk_report_schedule_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_schedule_report_type_id`
    FOREIGN KEY (`report_type_id`)
    REFERENCES `cenozo`.`report_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_schedule_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_schedule_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_schedule_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`report_schedule_has_report_restriction`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`report_schedule_has_report_restriction` (
  `report_schedule_id` INT(10) UNSIGNED NOT NULL,
  `report_restriction_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `value` MEDIUMTEXT NOT NULL,
  PRIMARY KEY (`report_schedule_id`, `report_restriction_id`),
  INDEX `fk_report_restriction_id` (`report_restriction_id` ASC),
  INDEX `fk_report_schedule_id` (`report_schedule_id` ASC),
  CONSTRAINT `fk_report_schedule_has_report_restriction_report_restriction_id`
    FOREIGN KEY (`report_restriction_id`)
    REFERENCES `cenozo`.`report_restriction` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_report_schedule_has_report_restriction_report_schedule_id`
    FOREIGN KEY (`report_schedule_id`)
    REFERENCES `cenozo`.`report_schedule` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`report_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`report_type` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(45) NOT NULL,
  `title` VARCHAR(255) NOT NULL,
  `subject` VARCHAR(45) NOT NULL,
  `description` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  UNIQUE INDEX `uq_title` (`title` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`role` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(45) NOT NULL,
  `tier` INT(10) UNSIGNED NOT NULL DEFAULT 1 COMMENT '1 = normal, 2 = site admin, 3 = global admin',
  `all_sites` TINYINT(1) NOT NULL DEFAULT 0,
  `special` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`role_has_alternate_consent_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`role_has_alternate_consent_type` (
  `role_id` INT(10) UNSIGNED NOT NULL,
  `alternate_consent_type_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`role_id`, `alternate_consent_type_id`),
  INDEX `fk_alternate_consent_type_id` (`alternate_consent_type_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  CONSTRAINT `fk_role_has_alternate_consent_type_alternate_consent_type_id`
    FOREIGN KEY (`alternate_consent_type_id`)
    REFERENCES `cenozo`.`alternate_consent_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_role_has_alternate_consent_type_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`role_has_alternate_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`role_has_alternate_type` (
  `role_id` INT(10) UNSIGNED NOT NULL,
  `alternate_type_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`role_id`, `alternate_type_id`),
  INDEX `fk_alternate_type_id` (`alternate_type_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  CONSTRAINT `fk_role_has_alternate_type_alternate_type_id`
    FOREIGN KEY (`alternate_type_id`)
    REFERENCES `cenozo`.`alternate_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_role_has_alternate_type_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`role_has_consent_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`role_has_consent_type` (
  `role_id` INT(10) UNSIGNED NOT NULL,
  `consent_type_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`role_id`, `consent_type_id`),
  INDEX `fk_consent_type_id` (`consent_type_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  CONSTRAINT `fk_role_has_consent_type_consent_type_id`
    FOREIGN KEY (`consent_type_id`)
    REFERENCES `cenozo`.`consent_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_role_has_consent_type_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`role_has_hold_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`role_has_hold_type` (
  `role_id` INT(10) UNSIGNED NOT NULL,
  `hold_type_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`role_id`, `hold_type_id`),
  INDEX `fk_hold_type_id` (`hold_type_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  CONSTRAINT `fk_role_has_hold_type_hold_type_id`
    FOREIGN KEY (`hold_type_id`)
    REFERENCES `cenozo`.`hold_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_role_has_hold_type_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`role_has_overview`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`role_has_overview` (
  `role_id` INT(10) UNSIGNED NOT NULL,
  `overview_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`role_id`, `overview_id`),
  INDEX `fk_overview_id` (`overview_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  CONSTRAINT `fk_role_has_overview_overview_id`
    FOREIGN KEY (`overview_id`)
    REFERENCES `cenozo`.`overview` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_role_has_overview_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`role_has_proxy_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`role_has_proxy_type` (
  `role_id` INT(10) UNSIGNED NOT NULL,
  `proxy_type_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`role_id`, `proxy_type_id`),
  INDEX `fk_proxy_type_id` (`proxy_type_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  CONSTRAINT `fk_role_has_proxy_type_proxy_type_id`
    FOREIGN KEY (`proxy_type_id`)
    REFERENCES `cenozo`.`proxy_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_role_has_proxy_type_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`role_has_report_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`role_has_report_type` (
  `role_id` INT(10) UNSIGNED NOT NULL,
  `report_type_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`role_id`, `report_type_id`),
  INDEX `fk_report_type_id` (`report_type_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  CONSTRAINT `fk_role_has_report_type_report_type_id`
    FOREIGN KEY (`report_type_id`)
    REFERENCES `cenozo`.`report_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_role_has_report_type_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`script`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`script` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(255) NOT NULL,
  `started_event_type_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `finished_event_type_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `sid` INT(11) NULL DEFAULT NULL,
  `pine_qnaire_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `repeated` TINYINT(1) NOT NULL DEFAULT 0,
  `supporting` TINYINT(1) NOT NULL DEFAULT 0,
  `total_pages` INT(10) UNSIGNED NULL DEFAULT NULL,
  `description` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  UNIQUE INDEX `uq_sid` (`sid` ASC),
  UNIQUE INDEX `uq_pine_qnaire_id` (`pine_qnaire_id` ASC),
  INDEX `fk_started_event_type_id` (`started_event_type_id` ASC),
  INDEX `fk_finished_event_type_id` (`finished_event_type_id` ASC),
  CONSTRAINT `fk_script_finished_event_type_id`
    FOREIGN KEY (`finished_event_type_id`)
    REFERENCES `cenozo`.`event_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_script_started_event_type_id`
    FOREIGN KEY (`started_event_type_id`)
    REFERENCES `cenozo`.`event_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`search`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`search` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `word` VARCHAR(255) NOT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_word` (`word` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`search_result`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`search_result` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `search_id` INT(10) UNSIGNED NOT NULL,
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `record_id` INT(10) UNSIGNED NOT NULL,
  `subject` VARCHAR(64) NOT NULL,
  `column_name` VARCHAR(64) NOT NULL,
  `value` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_search_id_participant_id_subject_column_name` (`search_id` ASC, `participant_id` ASC, `subject` ASC, `column_name` ASC),
  UNIQUE INDEX `uq_search_id_record_id_subject_column_name` (`search_id` ASC, `record_id` ASC, `subject` ASC, `column_name` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_search_id` (`search_id` ASC),
  CONSTRAINT `fk_search_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_search_result_search_id`
    FOREIGN KEY (`search_id`)
    REFERENCES `cenozo`.`search` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`site`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`site` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(45) NOT NULL,
  `timezone` VARCHAR(45) NOT NULL DEFAULT 'Canada/Eastern',
  `title` VARCHAR(45) NULL DEFAULT NULL,
  `phone_number` VARCHAR(45) NULL DEFAULT NULL,
  `address1` VARCHAR(512) NULL DEFAULT NULL,
  `address2` VARCHAR(512) NULL DEFAULT NULL,
  `city` VARCHAR(100) NULL DEFAULT NULL,
  `region_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `postcode` VARCHAR(10) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  INDEX `fk_site_region_id` (`region_id` ASC),
  CONSTRAINT `fk_site_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`source`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`source` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(45) NOT NULL,
  `override_stratum` TINYINT(1) NOT NULL DEFAULT 0,
  `description` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`stratum`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`stratum` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `study_id` INT(10) UNSIGNED NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `description` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_study_id_name` (`study_id` ASC, `name` ASC),
  INDEX `fk_study_id` (`study_id` ASC),
  CONSTRAINT `fk_stratum_study_id`
    FOREIGN KEY (`study_id`)
    REFERENCES `cenozo`.`study` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`stratum_has_participant`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`stratum_has_participant` (
  `stratum_id` INT(10) UNSIGNED NOT NULL,
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`stratum_id`, `participant_id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_stratum_id` (`stratum_id` ASC),
  CONSTRAINT `fk_stratum_has_participant_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_stratum_has_participant_stratum_id`
    FOREIGN KEY (`stratum_id`)
    REFERENCES `cenozo`.`stratum` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`study`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`study` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(45) NOT NULL,
  `identifier_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `consent_type_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `completed_event_type_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `description` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  INDEX `fk_consent_type_id` (`consent_type_id` ASC),
  INDEX `fk_completed_event_type_id` (`completed_event_type_id` ASC),
  INDEX `fk_identifier_id` (`identifier_id` ASC),
  CONSTRAINT `fk_study_completed_event_type_id`
    FOREIGN KEY (`completed_event_type_id`)
    REFERENCES `cenozo`.`event_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_study_consent_type_id`
    FOREIGN KEY (`consent_type_id`)
    REFERENCES `cenozo`.`consent_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_study_identifier_id`
    FOREIGN KEY (`identifier_id`)
    REFERENCES `cenozo`.`identifier` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`study_phase`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`study_phase` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `study_id` INT(10) UNSIGNED NOT NULL,
  `rank` INT(10) UNSIGNED NOT NULL,
  `code` CHAR(2) NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_study_id_rank` (`study_id` ASC, `rank` ASC),
  UNIQUE INDEX `uq_study_id_code` (`study_id` ASC, `code` ASC),
  UNIQUE INDEX `uq_study_id_name` (`study_id` ASC, `name` ASC),
  INDEX `fk_study_id` (`study_id` ASC),
  CONSTRAINT `fk_study_phase_study_id`
    FOREIGN KEY (`study_id`)
    REFERENCES `cenozo`.`study` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`supporting_script_check`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`supporting_script_check` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `script_id` INT(10) UNSIGNED NOT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_participant_id_script_id` (`participant_id` ASC, `script_id` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_script_id` (`script_id` ASC),
  INDEX `dk_datetime` (`datetime` ASC),
  CONSTRAINT `fk_supporting_script_check_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_supporting_script_check_script_id`
    FOREIGN KEY (`script_id`)
    REFERENCES `cenozo`.`script` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`system_message`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`system_message` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `application_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `site_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `role_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `title` VARCHAR(255) NOT NULL,
  `note` MEDIUMTEXT NOT NULL,
  `expiry` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_system_message_id` (`application_id` ASC),
  CONSTRAINT `fk_system_message_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_system_message_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_system_message_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`trace`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`trace` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `trace_type_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `datetime` DATETIME NOT NULL,
  `user_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `site_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `role_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `application_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `note` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_participant_id_datetime` (`participant_id` ASC, `datetime` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_trace_type_id` (`trace_type_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_trace_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_trace_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_trace_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_trace_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_trace_trace_type_id`
    FOREIGN KEY (`trace_type_id`)
    REFERENCES `cenozo`.`trace_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_trace_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`trace_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`trace_type` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(100) NOT NULL,
  `description` VARCHAR(512) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`unique_identifier_pool`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`unique_identifier_pool` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `uid` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_uid` (`uid` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`user` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(45) NOT NULL,
  `password` VARCHAR(255) NULL DEFAULT NULL,
  `first_name` VARCHAR(255) NOT NULL,
  `last_name` VARCHAR(255) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `email` VARCHAR(255) NULL DEFAULT NULL,
  `timezone` VARCHAR(45) NOT NULL DEFAULT 'Canada/Eastern',
  `use_12hour_clock` TINYINT(1) NOT NULL DEFAULT 0,
  `login_failures` INT(11) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  UNIQUE INDEX `uq_email` (`email` ASC),
  INDEX `dk_active` (`active` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`user_has_collection`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`user_has_collection` (
  `user_id` INT(10) UNSIGNED NOT NULL,
  `collection_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`user_id`, `collection_id`),
  INDEX `fk_collection_id` (`collection_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  CONSTRAINT `fk_user_has_collection_collection_id`
    FOREIGN KEY (`collection_id`)
    REFERENCES `cenozo`.`collection` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_has_collection_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COMMENT = 'Users who can edit locked collections.';


-- -----------------------------------------------------
-- Table `cenozo`.`user_has_language`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`user_has_language` (
  `user_id` INT(10) UNSIGNED NOT NULL,
  `language_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`user_id`, `language_id`),
  INDEX `fk_language_id` (`language_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  CONSTRAINT `fk_user_has_language_language_id`
    FOREIGN KEY (`language_id`)
    REFERENCES `cenozo`.`language` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_user_has_language_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`user_has_system_message`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`user_has_system_message` (
  `user_id` INT(10) UNSIGNED NOT NULL,
  `system_message_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`user_id`, `system_message_id`),
  INDEX `fk_system_message_id` (`system_message_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  CONSTRAINT `fk_user_has_system_message_system_message_id`
    FOREIGN KEY (`system_message_id`)
    REFERENCES `cenozo`.`system_message` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_user_has_system_message_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`variable_cache`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`variable_cache` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `variable` VARCHAR(255) NOT NULL,
  `value` VARCHAR(255) NULL DEFAULT NULL,
  `expiry` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_participant_id_variable` (`participant_id` ASC, `variable` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `dk_variable` (`variable` ASC),
  CONSTRAINT `fk_variable_cache_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `cenozo`.`webphone`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`webphone` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `ip` VARCHAR(15) NOT NULL,
  `site_id` INT(10) UNSIGNED NOT NULL,
  `webphone` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_ip_site_id` (`ip` ASC, `site_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  CONSTRAINT `fk_webphone_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;

USE `sabretooth` ;

-- -----------------------------------------------------
-- Table `sabretooth`.`access`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`access` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `user_id` INT(10) UNSIGNED NOT NULL,
  `role_id` INT(10) UNSIGNED NOT NULL,
  `site_id` INT(10) UNSIGNED NOT NULL,
  `datetime` DATETIME NULL DEFAULT NULL,
  `microtime` DOUBLE NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_user_id_role_id_site_id` (`user_id` ASC, `role_id` ASC, `site_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `datetime_microtime` (`datetime` ASC, `microtime` ASC),
  CONSTRAINT `fk_access_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_access_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_access_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`appointment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`appointment` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `interview_id` INT(10) UNSIGNED NOT NULL,
  `user_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `phone_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `assignment_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `override` TINYINT(1) NOT NULL DEFAULT 0,
  `outcome` ENUM('reached', 'not reached', 'cancelled') NULL DEFAULT NULL,
  `start_vacancy_id` INT(10) UNSIGNED NULL DEFAULT NULL COMMENT 'Do not edit, determined by trigger.',
  `end_vacancy_id` INT(10) UNSIGNED NULL DEFAULT NULL COMMENT 'Do not edit, determined by trigger.',
  PRIMARY KEY (`id`),
  INDEX `fk_assignment_id` (`assignment_id` ASC),
  INDEX `fk_phone_id` (`phone_id` ASC),
  INDEX `fk_interview_id` (`interview_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `dk_outcome` (`outcome` ASC),
  INDEX `fk_start_vacancy_id` (`start_vacancy_id` ASC),
  INDEX `fk_end_vacancy_id` (`end_vacancy_id` ASC),
  CONSTRAINT `fk_appointment_assignment_id`
    FOREIGN KEY (`assignment_id`)
    REFERENCES `sabretooth`.`assignment` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_appointment_end_vacancy_id`
    FOREIGN KEY (`end_vacancy_id`)
    REFERENCES `sabretooth`.`vacancy` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_appointment_interview_id`
    FOREIGN KEY (`interview_id`)
    REFERENCES `sabretooth`.`interview` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_appointment_phone_id`
    FOREIGN KEY (`phone_id`)
    REFERENCES `cenozo`.`phone` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_appointment_start_vacancy_id`
    FOREIGN KEY (`start_vacancy_id`)
    REFERENCES `sabretooth`.`vacancy` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_appointment_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`appointment_has_mail`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`appointment_has_mail` (
  `appointment_id` INT(10) UNSIGNED NOT NULL,
  `mail_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`appointment_id`, `mail_id`),
  UNIQUE INDEX `uq_appointment_id_mail_id` (`appointment_id` ASC, `mail_id` ASC),
  INDEX `fk_mail_id` (`mail_id` ASC),
  INDEX `fk_appointment_id` (`appointment_id` ASC),
  CONSTRAINT `fk_appointment_has_mail_appointment_id`
    FOREIGN KEY (`appointment_id`)
    REFERENCES `sabretooth`.`appointment` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_appointment_has_mail_mail_id`
    FOREIGN KEY (`mail_id`)
    REFERENCES `cenozo`.`mail` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`appointment_has_vacancy`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`appointment_has_vacancy` (
  `appointment_id` INT(10) UNSIGNED NOT NULL,
  `vacancy_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`appointment_id`, `vacancy_id`),
  INDEX `fk_vacancy_id` (`vacancy_id` ASC),
  INDEX `fk_appointment_id` (`appointment_id` ASC),
  CONSTRAINT `fk_appointment_has_vacancy_appointment_id`
    FOREIGN KEY (`appointment_id`)
    REFERENCES `sabretooth`.`appointment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_appointment_has_vacancy_vacancy_id`
    FOREIGN KEY (`vacancy_id`)
    REFERENCES `sabretooth`.`vacancy` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`appointment_mail`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`appointment_mail` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `site_id` INT(10) UNSIGNED NOT NULL,
  `language_id` INT(10) UNSIGNED NOT NULL,
  `from_name` VARCHAR(255) NULL DEFAULT NULL,
  `from_address` VARCHAR(127) NOT NULL,
  `cc_address` VARCHAR(255) NULL DEFAULT NULL,
  `bcc_address` VARCHAR(255) NULL DEFAULT NULL,
  `delay_offset` INT(10) UNSIGNED NULL DEFAULT NULL,
  `delay_unit` ENUM('days', 'immediately') NOT NULL DEFAULT 'days',
  `subject` VARCHAR(255) NOT NULL,
  `body` MEDIUMTEXT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_language_id` (`language_id` ASC),
  CONSTRAINT `fk_appointment_mail_language_id`
    FOREIGN KEY (`language_id`)
    REFERENCES `cenozo`.`language` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_appointment_mail_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`assignment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`assignment` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `user_id` INT(10) UNSIGNED NOT NULL,
  `role_id` INT(10) UNSIGNED NOT NULL,
  `site_id` INT(10) UNSIGNED NOT NULL COMMENT 'The site from which the user was assigned.',
  `interview_id` INT(10) UNSIGNED NOT NULL,
  `queue_id` INT(10) UNSIGNED NOT NULL COMMENT 'The queue that the assignment came from.',
  `start_datetime` DATETIME NOT NULL,
  `end_datetime` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_interview_id` (`interview_id` ASC),
  INDEX `fk_queue_id` (`queue_id` ASC),
  INDEX `dk_start_datetime` (`start_datetime` ASC),
  INDEX `dk_end_datetime` (`end_datetime` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  CONSTRAINT `fk_assignment_interview_id`
    FOREIGN KEY (`interview_id`)
    REFERENCES `sabretooth`.`interview` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_assignment_queue_id`
    FOREIGN KEY (`queue_id`)
    REFERENCES `sabretooth`.`queue` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_assignment_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_assignment_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_assignment_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`assignment_last_phone_call`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`assignment_last_phone_call` (
  `assignment_id` INT(10) UNSIGNED NOT NULL,
  `phone_call_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`assignment_id`),
  INDEX `fk_phone_call_id` (`phone_call_id` ASC),
  CONSTRAINT `fk_assignment_last_phone_call_assignment_id`
    FOREIGN KEY (`assignment_id`)
    REFERENCES `sabretooth`.`assignment` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_assignment_last_phone_call_phone_call_id`
    FOREIGN KEY (`phone_call_id`)
    REFERENCES `sabretooth`.`phone_call` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`custom_report`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`custom_report` (
  `id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(255) NOT NULL,
  `data` LONGTEXT NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sabretooth`.`interview`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`interview` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `qnaire_id` INT(10) UNSIGNED NOT NULL,
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `site_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `method` ENUM('phone', 'web') NOT NULL DEFAULT 'phone',
  `current_page_rank` INT(10) UNSIGNED NULL DEFAULT NULL,
  `start_datetime` DATETIME NOT NULL,
  `end_datetime` DATETIME NULL DEFAULT NULL,
  `note` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_participant_id_qnaire_id` (`participant_id` ASC, `qnaire_id` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_qnaire_id` (`qnaire_id` ASC),
  INDEX `dk_start_datetime` (`start_datetime` ASC),
  INDEX `dk_end_datetime` (`end_datetime` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  CONSTRAINT `fk_interview_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_interview_qnaire_id`
    FOREIGN KEY (`qnaire_id`)
    REFERENCES `sabretooth`.`qnaire` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_interview_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COMMENT = 'aka: qnaire_has_participant';


-- -----------------------------------------------------
-- Table `sabretooth`.`interview_last_appointment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`interview_last_appointment` (
  `interview_id` INT(10) UNSIGNED NOT NULL,
  `appointment_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`interview_id`),
  INDEX `fk_appointment_id` (`appointment_id` ASC),
  CONSTRAINT `fk_interview_last_appointment_appointment_id`
    FOREIGN KEY (`appointment_id`)
    REFERENCES `sabretooth`.`appointment` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_interview_last_appointment_interview_id`
    FOREIGN KEY (`interview_id`)
    REFERENCES `sabretooth`.`interview` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`interview_last_assignment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`interview_last_assignment` (
  `interview_id` INT(10) UNSIGNED NOT NULL,
  `assignment_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`interview_id`),
  INDEX `fk_assignment_id` (`assignment_id` ASC),
  CONSTRAINT `fk_interview_last_assignment_assignment_id`
    FOREIGN KEY (`assignment_id`)
    REFERENCES `sabretooth`.`assignment` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_interview_last_assignment_interview_id`
    FOREIGN KEY (`interview_id`)
    REFERENCES `sabretooth`.`interview` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`jurisdiction`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`jurisdiction` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `site_id` INT(10) UNSIGNED NOT NULL,
  `postcode` VARCHAR(7) NOT NULL,
  `longitude` FLOAT NOT NULL,
  `latitude` FLOAT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_postcode` (`postcode` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `dk_postcode` (`postcode` ASC),
  CONSTRAINT `fk_jurisdiction_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`participant_last_interview`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`participant_last_interview` (
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `interview_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`participant_id`),
  INDEX `fk_interview_id` (`interview_id` ASC),
  CONSTRAINT `fk_participant_last_interview_interview_id`
    FOREIGN KEY (`interview_id`)
    REFERENCES `sabretooth`.`interview` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_last_interview_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`phone_call`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`phone_call` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `assignment_id` INT(10) UNSIGNED NOT NULL,
  `phone_id` INT(10) UNSIGNED NOT NULL,
  `start_datetime` DATETIME NOT NULL COMMENT 'The time the call started.',
  `end_datetime` DATETIME NULL DEFAULT NULL COMMENT 'The time the call endede.',
  `status` ENUM('contacted', 'busy', 'no answer', 'machine message', 'machine no message', 'fax', 'disconnected', 'wrong number', 'not reached', 'hang up', 'soft refusal') NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_assignment_id` (`assignment_id` ASC),
  INDEX `dk_status` (`status` ASC),
  INDEX `fk_phone_id` (`phone_id` ASC),
  INDEX `dk_start_datetime` (`start_datetime` ASC),
  INDEX `dk_end_datetime` (`end_datetime` ASC),
  CONSTRAINT `fk_phone_call_assignment_id`
    FOREIGN KEY (`assignment_id`)
    REFERENCES `sabretooth`.`assignment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_phone_call_phone_id`
    FOREIGN KEY (`phone_id`)
    REFERENCES `cenozo`.`phone` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`qnaire`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`qnaire` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `rank` INT(11) NOT NULL,
  `script_id` INT(10) UNSIGNED NOT NULL,
  `allow_missing_consent` TINYINT(1) NOT NULL DEFAULT 1,
  `web_version` TINYINT(1) NOT NULL DEFAULT 0,
  `delay_offset` INT(11) NOT NULL DEFAULT 0,
  `delay_unit` ENUM('day', 'week', 'month') NOT NULL DEFAULT 'week',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_rank` (`rank` ASC),
  INDEX `fk_script_id` (`script_id` ASC),
  CONSTRAINT `fk_qnaire_script_id`
    FOREIGN KEY (`script_id`)
    REFERENCES `cenozo`.`script` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`qnaire_has_alternate_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`qnaire_has_alternate_type` (
  `qnaire_id` INT(10) UNSIGNED NOT NULL,
  `alternate_type_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`qnaire_id`, `alternate_type_id`),
  INDEX `fk_alternate_type_id` (`alternate_type_id` ASC),
  INDEX `fk_qnaire_id` (`qnaire_id` ASC),
  CONSTRAINT `fk_qnaire_has_alternate_type_qnaire_id`
    FOREIGN KEY (`qnaire_id`)
    REFERENCES `sabretooth`.`qnaire` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_qnaire_has_alternate_type_alternate_type_id`
    FOREIGN KEY (`alternate_type_id`)
    REFERENCES `cenozo`.`alternate_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`qnaire_has_collection`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`qnaire_has_collection` (
  `qnaire_id` INT(10) UNSIGNED NOT NULL,
  `collection_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`qnaire_id`, `collection_id`),
  INDEX `fk_collection_id` (`collection_id` ASC),
  INDEX `fk_qnaire_id` (`qnaire_id` ASC),
  CONSTRAINT `fk_qnaire_has_collection_collection_id`
    FOREIGN KEY (`collection_id`)
    REFERENCES `cenozo`.`collection` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_qnaire_has_collection_qnaire_id`
    FOREIGN KEY (`qnaire_id`)
    REFERENCES `sabretooth`.`qnaire` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`qnaire_has_hold_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`qnaire_has_hold_type` (
  `qnaire_id` INT(10) UNSIGNED NOT NULL,
  `hold_type_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`qnaire_id`, `hold_type_id`),
  INDEX `fk_hold_type_id` (`hold_type_id` ASC),
  INDEX `fk_qnaire_id` (`qnaire_id` ASC),
  CONSTRAINT `fk_qnaire_has_hold_type_hold_type_id`
    FOREIGN KEY (`hold_type_id`)
    REFERENCES `cenozo`.`hold_type` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_qnaire_has_hold_type_qnaire_id`
    FOREIGN KEY (`qnaire_id`)
    REFERENCES `sabretooth`.`qnaire` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`qnaire_has_site`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`qnaire_has_site` (
  `qnaire_id` INT(10) UNSIGNED NOT NULL,
  `site_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`qnaire_id`, `site_id`),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_qnaire_id` (`qnaire_id` ASC),
  CONSTRAINT `fk_qnaire_has_site_qnaire_id`
    FOREIGN KEY (`qnaire_id`)
    REFERENCES `sabretooth`.`qnaire` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_qnaire_has_site_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`qnaire_has_stratum`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`qnaire_has_stratum` (
  `qnaire_id` INT(10) UNSIGNED NOT NULL,
  `stratum_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`qnaire_id`, `stratum_id`),
  INDEX `fk_stratum_id` (`stratum_id` ASC),
  INDEX `fk_qnaire_id` (`qnaire_id` ASC),
  CONSTRAINT `fk_qnaure_has_stratum_qnaire_id`
    FOREIGN KEY (`qnaire_id`)
    REFERENCES `sabretooth`.`qnaire` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_qnaure_has_stratum_stratum_id`
    FOREIGN KEY (`stratum_id`)
    REFERENCES `cenozo`.`stratum` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`queue`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`queue` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `name` VARCHAR(45) NOT NULL,
  `title` VARCHAR(255) NOT NULL,
  `rank` INT(10) UNSIGNED NULL DEFAULT NULL,
  `time_specific` TINYINT(1) NOT NULL,
  `parent_queue_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `description` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  UNIQUE INDEX `uq_rank` (`rank` ASC),
  INDEX `fk_parent_queue_id` (`parent_queue_id` ASC),
  CONSTRAINT `fk_queue_parent_queue_id`
    FOREIGN KEY (`parent_queue_id`)
    REFERENCES `sabretooth`.`queue` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`queue_has_participant`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`queue_has_participant` (
  `queue_id` INT(10) UNSIGNED NOT NULL,
  `participant_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `site_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `qnaire_id` INT(10) UNSIGNED NULL DEFAULT NULL,
  `start_qnaire_date` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`queue_id`, `participant_id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_queue_id` (`queue_id` ASC),
  INDEX `fk_qnaire_id` (`qnaire_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  CONSTRAINT `fk_queue_has_participant_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_queue_has_participant_qnaire_id`
    FOREIGN KEY (`qnaire_id`)
    REFERENCES `sabretooth`.`qnaire` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_queue_has_participant_queue_id`
    FOREIGN KEY (`queue_id`)
    REFERENCES `sabretooth`.`queue` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_queue_has_participant_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`recording`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`recording` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `rank` INT(11) NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `record` TINYINT(1) NOT NULL,
  `timer` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_rank` (`rank` ASC),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`recording_file`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`recording_file` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `recording_id` INT(10) UNSIGNED NOT NULL,
  `language_id` INT(10) UNSIGNED NOT NULL,
  `filename` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_recording_id_language_id` (`recording_id` ASC, `language_id` ASC),
  INDEX `fk_recording_id` (`recording_id` ASC),
  INDEX `fk_language_id` (`language_id` ASC),
  CONSTRAINT `fk_recording_file_language_id`
    FOREIGN KEY (`language_id`)
    REFERENCES `cenozo`.`language` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_recording_file_recording_id`
    FOREIGN KEY (`recording_id`)
    REFERENCES `sabretooth`.`recording` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`region_site`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`region_site` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `site_id` INT(10) UNSIGNED NOT NULL,
  `region_id` INT(10) UNSIGNED NOT NULL,
  `language_id` INT(10) UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_region_id_language_id` (`region_id` ASC, `language_id` ASC),
  INDEX `fk_region_id` (`region_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_language_id` (`language_id` ASC),
  CONSTRAINT `fk_region_site_language_id`
    FOREIGN KEY (`language_id`)
    REFERENCES `cenozo`.`language` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_region_site_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_region_site_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`role_has_custom_report`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`role_has_custom_report` (
  `role_id` INT(10) UNSIGNED NOT NULL,
  `custom_report_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`role_id`, `custom_report_id`),
  INDEX `fk_custom_report_id` (`custom_report_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  CONSTRAINT `fk_role_has_custom_report_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_role_has_custom_report_custom_report_id`
    FOREIGN KEY (`custom_report_id`)
    REFERENCES `sabretooth`.`custom_report` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COLLATE = utf8_bin;


-- -----------------------------------------------------
-- Table `sabretooth`.`role_has_service`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`role_has_service` (
  `role_id` INT(10) UNSIGNED NOT NULL,
  `service_id` INT(10) UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (`role_id`, `service_id`),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_service_id` (`service_id` ASC),
  CONSTRAINT `fk_role_has_service_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_role_has_service_service_id`
    FOREIGN KEY (`service_id`)
    REFERENCES `sabretooth`.`service` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`service`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`service` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `method` ENUM('DELETE', 'GET', 'PATCH', 'POST', 'PUT') NOT NULL,
  `subject` VARCHAR(45) NOT NULL,
  `resource` TINYINT(1) NOT NULL DEFAULT 0,
  `restricted` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_method_subject_resource` (`method` ASC, `subject` ASC, `resource` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`setting`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`setting` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `site_id` INT(10) UNSIGNED NOT NULL,
  `mail_name` VARCHAR(255) NULL DEFAULT NULL,
  `mail_address` VARCHAR(127) NULL DEFAULT NULL,
  `call_without_webphone` TINYINT(1) NOT NULL DEFAULT 0,
  `calling_start_time` TIME NOT NULL DEFAULT '09:00:00',
  `calling_end_time` TIME NOT NULL DEFAULT '21:00:00',
  `pre_call_window` INT(10) UNSIGNED NOT NULL DEFAULT 5,
  `post_call_window` INT(10) UNSIGNED NOT NULL DEFAULT 15,
  `contacted_wait` INT(10) UNSIGNED NOT NULL DEFAULT 10080,
  `busy_wait` INT(10) UNSIGNED NOT NULL DEFAULT 15,
  `fax_wait` INT(10) UNSIGNED NOT NULL DEFAULT 15,
  `no_answer_wait` INT(10) UNSIGNED NOT NULL DEFAULT 1440,
  `not_reached_wait` INT(10) UNSIGNED NOT NULL DEFAULT 4320,
  `hang_up_wait` INT(10) UNSIGNED NOT NULL DEFAULT 2880,
  `soft_refusal_wait` INT(10) UNSIGNED NOT NULL DEFAULT 525600,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_site_id` (`site_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  CONSTRAINT `fk_setting_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`vacancy`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`vacancy` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
  `create_timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `site_id` INT(10) UNSIGNED NOT NULL,
  `datetime` DATETIME NOT NULL,
  `operators` INT(11) NOT NULL DEFAULT 1,
  `appointments` INT(11) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_site_id_datetime` (`site_id` ASC, `datetime` ASC),
  INDEX `dk_datetime` (`datetime` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  CONSTRAINT `fk_vacancy_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `sabretooth`.`writelog`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sabretooth`.`writelog` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` INT(10) UNSIGNED NOT NULL,
  `site_id` INT(10) UNSIGNED NOT NULL,
  `role_id` INT(10) UNSIGNED NOT NULL,
  `method` ENUM('DELETE', 'PATCH', 'POST', 'PUT') NULL DEFAULT NULL,
  `path` VARCHAR(512) NULL DEFAULT NULL,
  `elapsed` FLOAT NULL DEFAULT NULL,
  `status` INT(11) NULL DEFAULT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `dk_datetime` (`datetime` ASC),
  CONSTRAINT `fk_writelog_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_writelog_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_writelog_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;

USE `cenozo` ;

-- -----------------------------------------------------
-- procedure contact_changed
-- -----------------------------------------------------

DELIMITER $$
USE `cenozo`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `contact_changed`(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  IF proc_participant_id IS NOT NULL THEN
    SELECT trace_type.name, IF( address.id IS NULL, 0, COUNT(*) )
    INTO @trace_type, @address_count
    FROM participant
    JOIN participant_last_trace ON participant.id = participant_last_trace.participant_id
    LEFT JOIN trace ON participant_last_trace.trace_id = trace.id
    LEFT JOIN trace_type ON trace.trace_type_id = trace_type.id
    LEFT JOIN address ON participant.id = address.participant_id AND address.active = 1
    WHERE participant.id = proc_participant_id;

    SELECT IF( phone.id IS NULL, 0, COUNT(*) )
    INTO @phone_count
    FROM participant
    LEFT JOIN phone ON participant.id = phone.participant_id AND phone.active = 1
    WHERE participant.id = proc_participant_id;

    IF 0 = @address_count OR 0 = @phone_count THEN
      IF @trace_type IS NULL THEN
        INSERT INTO trace( participant_id, trace_type_id, datetime, note )
        SELECT proc_participant_id, trace_type.id, UTC_TIMESTAMP(),
               "Automatically added after address or phone changed."
        FROM trace_type
        WHERE name = "site";
      END IF;
    ELSE
      IF @trace_type IS NOT NULL THEN
        INSERT INTO trace( participant_id, trace_type_id, datetime, note )
        VALUES( proc_participant_id, NULL, UTC_TIMESTAMP(),
                "Automatically added after address or phone changed." );
      END IF;
    END IF;
  END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_hold_from_consent
-- -----------------------------------------------------

DELIMITER $$
USE `cenozo`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `get_hold_from_consent`(IN proc_consent_id INT(10) UNSIGNED, OUT proc_hold_id INT(10) UNSIGNED)
BEGIN
  SELECT hold.id INTO proc_hold_id
  FROM consent
  JOIN consent_type ON consent.consent_type_id = consent_type.id
  LEFT JOIN hold ON consent.datetime = hold.datetime
   AND hold.participant_id = consent.participant_id
  WHERE consent_type.name = "participation"
  AND consent.id = proc_consent_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure remove_duplicate_hold
-- -----------------------------------------------------

DELIMITER $$
USE `cenozo`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `remove_duplicate_hold`(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  
  DECLARE id_val INT UNSIGNED;
  DECLARE participant_id_val INT UNSIGNED;
  DECLARE hold_type_id_val INT UNSIGNED;
  DECLARE last_participant_id_val INT UNSIGNED;
  DECLARE last_hold_type_id_val INT UNSIGNED;

  
  DECLARE no_more_rows BOOLEAN;
  DECLARE loop_cntr INT DEFAULT 0;
  DECLARE num_rows INT DEFAULT 0;

  
  DECLARE the_cursor CURSOR FOR
  SELECT id, participant_id, hold_type_id
  FROM hold
  WHERE participant_id = IFNULL( proc_participant_id, participant_id )
  ORDER BY participant_id, datetime;

  
  DECLARE CONTINUE HANDLER FOR NOT FOUND
  SET no_more_rows = TRUE;

  
  
  OPEN the_cursor;
  select FOUND_ROWS() into num_rows;

  SET last_participant_id_val = NULL;
  SET last_hold_type_id_val = NULL;

  the_loop: LOOP

    FETCH the_cursor
    INTO id_val, participant_id_val, hold_type_id_val;

    
      
      
    IF no_more_rows THEN
      CLOSE the_cursor;
      LEAVE the_loop;
    END IF;

    IF NOT (participant_id_val <=> last_participant_id_val ) THEN
      

      IF hold_type_id_val IS NULL THEN
        
        DELETE FROM hold WHERE id = id_val;
        SET last_participant_id_val = NULL;
        SET last_hold_type_id_val = NULL;
      ELSE
        
        SET last_participant_id_val = participant_id_val;
        SET last_hold_type_id_val = hold_type_id_val;
      END IF;
    ELSE
      

      
      IF hold_type_id_val <=> last_hold_type_id_val THEN
        
        DELETE FROM hold WHERE id = id_val;
      ELSE
        
        SET last_participant_id_val = participant_id_val;
        SET last_hold_type_id_val = hold_type_id_val;
      END IF;
    END IF;

    
    SET loop_cntr = loop_cntr + 1;

  END LOOP the_loop;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_alternate_first_address
-- -----------------------------------------------------

DELIMITER $$
USE `cenozo`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_alternate_first_address`(IN proc_alternate_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO alternate_first_address( alternate_id, address_id )
  SELECT alternate.id, address.id
  FROM alternate
  LEFT JOIN address ON alternate.id = address.alternate_id
  AND address.rank <=> (
    SELECT MIN( address.rank )
    FROM address
    WHERE address.active
    AND alternate.id = address.alternate_id
    AND CASE MONTH( CURRENT_DATE() )
      WHEN 1 THEN address.january
      WHEN 2 THEN address.february
      WHEN 3 THEN address.march
      WHEN 4 THEN address.april
      WHEN 5 THEN address.may
      WHEN 6 THEN address.june
      WHEN 7 THEN address.july
      WHEN 8 THEN address.august
      WHEN 9 THEN address.september
      WHEN 10 THEN address.october
      WHEN 11 THEN address.november
      WHEN 12 THEN address.december
      ELSE 0 END = 1
    GROUP BY address.alternate_id
  )
  WHERE alternate.id = proc_alternate_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_alternate_last_alternate_consent
-- -----------------------------------------------------

DELIMITER $$
USE `cenozo`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_alternate_last_alternate_consent`(IN proc_alternate_id INT(10) UNSIGNED, IN proc_alternate_consent_type_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO alternate_last_alternate_consent( alternate_id, alternate_consent_type_id, alternate_consent_id )
  SELECT alternate.id, alternate_consent_type.id, alternate_consent.id
  FROM alternate
  CROSS JOIN alternate_consent_type
  LEFT JOIN alternate_consent ON alternate.id = alternate_consent.alternate_id
  AND alternate_consent_type.id = alternate_consent.alternate_consent_type_id
  AND alternate_consent.datetime <=> (
    SELECT MAX( datetime )
    FROM alternate_consent
    WHERE alternate.id = alternate_consent.alternate_id
    AND alternate_consent_type.id = alternate_consent.alternate_consent_type_id
    GROUP BY alternate_consent.alternate_id, alternate_consent.alternate_consent_type_id
    LIMIT 1
  )
  WHERE alternate.id = proc_alternate_id
  AND alternate_consent_type.id = proc_alternate_consent_type_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_alternate_last_alternate_consents
-- -----------------------------------------------------

DELIMITER $$
USE `cenozo`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_alternate_last_alternate_consents`(IN proc_alternate_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO alternate_last_alternate_consent( alternate_id, alternate_consent_type_id, alternate_consent_id )
  SELECT alternate.id, alternate_consent_type.id, alternate_consent.id
  FROM alternate
  CROSS JOIN alternate_consent_type
  LEFT JOIN alternate_consent ON alternate.id = alternate_consent.alternate_id
  AND alternate_consent_type.id = alternate_consent.alternate_consent_type_id
  AND alternate_consent.datetime <=> (
    SELECT MAX( datetime )
    FROM alternate_consent
    WHERE alternate.id = alternate_consent.alternate_id
    AND alternate_consent_type.id = alternate_consent.alternate_consent_type_id
    GROUP BY alternate_consent.alternate_id, alternate_consent.alternate_consent_type_id
    LIMIT 1
  )
  WHERE alternate.id = proc_alternate_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_alternate_last_written_alternate_consent
-- -----------------------------------------------------

DELIMITER $$
USE `cenozo`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_alternate_last_written_alternate_consent`(IN proc_alternate_id INT(10) UNSIGNED, IN proc_alternate_consent_type_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO alternate_last_written_alternate_consent( alternate_id, alternate_consent_type_id, alternate_consent_id )
  SELECT alternate.id, alternate_consent_type.id, alternate_consent.id
  FROM alternate
  CROSS JOIN alternate_consent_type
  LEFT JOIN alternate_consent ON alternate.id = alternate_consent.alternate_id
  AND alternate_consent_type.id = alternate_consent.alternate_consent_type_id
  AND alternate_consent.datetime <=> (
    SELECT MAX( datetime )
    FROM alternate_consent
    WHERE alternate_consent.written = true
    AND alternate.id = alternate_consent.alternate_id
    AND alternate_consent_type.id = alternate_consent.alternate_consent_type_id
    GROUP BY alternate_consent.alternate_id, alternate_consent.alternate_consent_type_id
    LIMIT 1
  )
  WHERE alternate.id = proc_alternate_id
  AND alternate_consent_type.id = proc_alternate_consent_type_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_alternate_last_written_alternate_consents
-- -----------------------------------------------------

DELIMITER $$
USE `cenozo`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_alternate_last_written_alternate_consents`(IN proc_alternate_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO alternate_last_written_alternate_consent( alternate_id, alternate_consent_type_id, alternate_consent_id )
  SELECT alternate.id, alternate_consent_type.id, alternate_consent.id
  FROM alternate
  CROSS JOIN alternate_consent_type
  LEFT JOIN alternate_consent ON alternate.id = alternate_consent.alternate_id
  AND alternate_consent_type.id = alternate_consent.alternate_consent_type_id
  AND alternate_consent.datetime <=> (
    SELECT MAX( datetime )
    FROM alternate_consent
    WHERE alternate_consent.written = true
    AND alternate.id = alternate_consent.alternate_id
    AND alternate_consent_type.id = alternate_consent.alternate_consent_type_id
    GROUP BY alternate_consent.alternate_id, alternate_consent.alternate_consent_type_id
    LIMIT 1
  )
  WHERE alternate.id = proc_alternate_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_first_address
-- -----------------------------------------------------

DELIMITER $$
USE `cenozo`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_participant_first_address`(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_first_address( participant_id, address_id )
  SELECT participant.id, address.id
  FROM participant
  LEFT JOIN address ON participant.id = address.participant_id
  AND address.rank <=> (
    SELECT MIN( address.rank )
    FROM address
    WHERE address.active
    AND participant.id = address.participant_id
    AND CASE MONTH( CURRENT_DATE() )
      WHEN 1 THEN address.january
      WHEN 2 THEN address.february
      WHEN 3 THEN address.march
      WHEN 4 THEN address.april
      WHEN 5 THEN address.may
      WHEN 6 THEN address.june
      WHEN 7 THEN address.july
      WHEN 8 THEN address.august
      WHEN 9 THEN address.september
      WHEN 10 THEN address.october
      WHEN 11 THEN address.november
      WHEN 12 THEN address.december
      ELSE 0 END = 1
    GROUP BY address.participant_id
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_consent
-- -----------------------------------------------------

DELIMITER $$
USE `cenozo`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_participant_last_consent`(IN proc_participant_id INT(10) UNSIGNED, IN proc_consent_type_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_consent( participant_id, consent_type_id, consent_id )
  SELECT participant.id, consent_type.id, consent.id
  FROM participant
  CROSS JOIN consent_type
  LEFT JOIN consent ON participant.id = consent.participant_id
  AND consent_type.id = consent.consent_type_id
  AND consent.datetime <=> (
    SELECT MAX( datetime )
    FROM consent
    WHERE participant.id = consent.participant_id
    AND consent_type.id = consent.consent_type_id
    GROUP BY consent.participant_id, consent.consent_type_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id
  AND consent_type.id = proc_consent_type_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_consents
-- -----------------------------------------------------

DELIMITER $$
USE `cenozo`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_participant_last_consents`(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_consent( participant_id, consent_type_id, consent_id )
  SELECT participant.id, consent_type.id, consent.id
  FROM participant
  CROSS JOIN consent_type
  LEFT JOIN consent ON participant.id = consent.participant_id
  AND consent_type.id = consent.consent_type_id
  AND consent.datetime <=> (
    SELECT MAX( datetime )
    FROM consent
    WHERE participant.id = consent.participant_id
    AND consent_type.id = consent.consent_type_id
    GROUP BY consent.participant_id, consent.consent_type_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_event
-- -----------------------------------------------------

DELIMITER $$
USE `cenozo`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_participant_last_event`(IN proc_participant_id INT(10) UNSIGNED, IN proc_event_type_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_event( participant_id, event_type_id, event_id )
  SELECT participant.id, event_type.id, event.id
  FROM participant
  CROSS JOIN event_type
  LEFT JOIN event ON participant.id = event.participant_id
  AND event_type.id = event.event_type_id
  AND event.datetime <=> (
    SELECT MAX( datetime )
    FROM event
    WHERE participant.id = event.participant_id
    AND event_type.id = event.event_type_id
    GROUP BY event.participant_id, event.event_type_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id
  AND event_type.id = proc_event_type_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_events
-- -----------------------------------------------------

DELIMITER $$
USE `cenozo`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_participant_last_events`(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_event( participant_id, event_type_id, event_id )
  SELECT participant.id, event_type.id, event.id
  FROM participant
  CROSS JOIN event_type
  LEFT JOIN event ON participant.id = event.participant_id
  AND event_type.id = event.event_type_id
  AND event.datetime <=> (
    SELECT MAX( datetime )
    FROM event
    WHERE participant.id = event.participant_id
    AND event_type.id = event.event_type_id
    GROUP BY event.participant_id, event.event_type_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_hin
-- -----------------------------------------------------

DELIMITER $$
USE `cenozo`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_participant_last_hin`(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_hin( participant_id, hin_id )
  SELECT participant.id, hin.id
  FROM participant
  LEFT JOIN hin ON participant.id = hin.participant_id
  AND hin.datetime <=> (
    SELECT MAX( datetime )
    FROM hin
    WHERE participant.id = hin.participant_id
    GROUP BY hin.participant_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_hold
-- -----------------------------------------------------

DELIMITER $$
USE `cenozo`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_participant_last_hold`(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_hold( participant_id, hold_id )
  SELECT participant.id, hold.id
  FROM participant
  LEFT JOIN hold ON participant.id = hold.participant_id
  AND hold.datetime <=> (
    SELECT MAX( datetime )
    FROM hold
    WHERE participant.id = hold.participant_id
    GROUP BY hold.participant_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_proxy
-- -----------------------------------------------------

DELIMITER $$
USE `cenozo`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_participant_last_proxy`(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_proxy( participant_id, proxy_id )
  SELECT participant.id, proxy.id
  FROM participant
  LEFT JOIN proxy ON participant.id = proxy.participant_id
  AND proxy.datetime <=> (
    SELECT MAX( datetime )
    FROM proxy
    WHERE participant.id = proxy.participant_id
    GROUP BY proxy.participant_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_trace
-- -----------------------------------------------------

DELIMITER $$
USE `cenozo`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_participant_last_trace`(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_trace( participant_id, trace_id )
  SELECT participant.id, trace.id
  FROM participant
  LEFT JOIN trace ON participant.id = trace.participant_id
  AND trace.datetime <=> (
    SELECT MAX( datetime )
    FROM trace
    WHERE participant.id = trace.participant_id
    GROUP BY trace.participant_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_written_consent
-- -----------------------------------------------------

DELIMITER $$
USE `cenozo`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_participant_last_written_consent`(IN proc_participant_id INT(10) UNSIGNED, IN proc_consent_type_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_written_consent( participant_id, consent_type_id, consent_id )
  SELECT participant.id, consent_type.id, consent.id
  FROM participant
  CROSS JOIN consent_type
  LEFT JOIN consent ON participant.id = consent.participant_id
  AND consent_type.id = consent.consent_type_id
  AND consent.datetime <=> (
    SELECT MAX( datetime )
    FROM consent
    WHERE consent.written = true
    AND participant.id = consent.participant_id
    AND consent_type.id = consent.consent_type_id
    GROUP BY consent.participant_id, consent.consent_type_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id
  AND consent_type.id = proc_consent_type_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_written_consents
-- -----------------------------------------------------

DELIMITER $$
USE `cenozo`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_participant_last_written_consents`(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_written_consent( participant_id, consent_type_id, consent_id )
  SELECT participant.id, consent_type.id, consent.id
  FROM participant
  CROSS JOIN consent_type
  LEFT JOIN consent ON participant.id = consent.participant_id
  AND consent_type.id = consent.consent_type_id
  AND consent.datetime <=> (
    SELECT MAX( datetime )
    FROM consent
    WHERE consent.written = true
    AND participant.id = consent.participant_id
    AND consent_type.id = consent.consent_type_id
    GROUP BY consent.participant_id, consent.consent_type_id
    LIMIT 1
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_primary_address
-- -----------------------------------------------------

DELIMITER $$
USE `cenozo`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_participant_primary_address`(IN proc_participant_id INT(10) UNSIGNED)
BEGIN

  REPLACE INTO participant_primary_address( participant_id, address_id )
  SELECT participant.id, address.id
  FROM participant
  LEFT JOIN address ON participant.id = address.participant_id
  AND address.rank <=> (
    SELECT MIN( address.rank )
    FROM address
    JOIN region ON address.region_id = region.id
    WHERE address.active = true 
    AND address.international = false
    AND address.region_id IS NOT NULL 
    AND address.postcode IS NOT NULL 
    AND participant.id = address.participant_id
    GROUP BY address.participant_id
  )
  WHERE participant.id = proc_participant_id;

END$$

DELIMITER ;
USE `sabretooth` ;

-- -----------------------------------------------------
-- procedure update_appointment_vacancies
-- -----------------------------------------------------

DELIMITER $$
USE `sabretooth`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_appointment_vacancies`(IN proc_appointment_id INT(10) UNSIGNED)
BEGIN
  IF proc_appointment_id IS NOT NULL THEN
    UPDATE appointment
    SET start_vacancy_id = (
      SELECT vacancy.id
      FROM appointment_has_vacancy
      JOIN vacancy ON appointment_has_vacancy.vacancy_id = vacancy.id
      WHERE appointment_id = proc_appointment_id
      ORDER BY vacancy.datetime LIMIT 1
    ),
    end_vacancy_id = (
      SELECT vacancy.id
      FROM appointment_has_vacancy
      JOIN vacancy ON appointment_has_vacancy.vacancy_id = vacancy.id
      WHERE appointment_id = proc_appointment_id
      ORDER BY vacancy.datetime DESC LIMIT 1
    )
    WHERE id = proc_appointment_id;
  END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_assignment_last_phone_call
-- -----------------------------------------------------

DELIMITER $$
USE `sabretooth`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_assignment_last_phone_call`(IN proc_assignment_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO assignment_last_phone_call( assignment_id, phone_call_id )
  SELECT assignment.id, phone_call.id
  FROM assignment
  LEFT JOIN phone_call ON assignment.id = phone_call.assignment_id
  AND phone_call.start_datetime <=> (
    SELECT MAX( start_datetime )
    FROM phone_call
    WHERE assignment.id = phone_call.assignment_id
    GROUP BY phone_call.assignment_id
    LIMIT 1
  )
  WHERE assignment.id = proc_assignment_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_interview_last_appointment
-- -----------------------------------------------------

DELIMITER $$
USE `sabretooth`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_interview_last_appointment`(IN proc_interview_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO interview_last_appointment( interview_id, appointment_id )
  SELECT interview.id, appointment.id
  FROM interview
  LEFT JOIN appointment ON interview.id = appointment.interview_id
  LEFT JOIN vacancy ON appointment.start_vacancy_id = vacancy.id
  AND vacancy.datetime <=> (
    SELECT MAX( datetime )
    FROM appointment
    JOIN vacancy ON appointment.start_vacancy_id = vacancy.id
    WHERE interview.id = appointment.interview_id
    GROUP BY appointment.interview_id
    LIMIT 1
  )
  WHERE interview.id = proc_interview_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_interview_last_assignment
-- -----------------------------------------------------

DELIMITER $$
USE `sabretooth`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_interview_last_assignment`(IN proc_interview_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO interview_last_assignment( interview_id, assignment_id )
  SELECT interview.id, assignment.id
  FROM interview
  LEFT JOIN assignment ON interview.id = assignment.interview_id
  AND assignment.start_datetime <=> (
    SELECT MAX( start_datetime )
    FROM assignment
    WHERE interview.id = assignment.interview_id
    GROUP BY assignment.interview_id
    LIMIT 1
  )
  WHERE interview.id = proc_interview_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_last_interview
-- -----------------------------------------------------

DELIMITER $$
USE `sabretooth`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_participant_last_interview`(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_last_interview( participant_id, interview_id )
  SELECT participant_id, interview.id
  FROM interview
  WHERE start_datetime <=> (
    SELECT MAX( start_datetime )
    FROM interview AS interview2
    WHERE interview.participant_id = interview2.participant_id
    GROUP BY interview2.participant_id
    LIMIT 1
  )
  AND participant_id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_site_for_jurisdiction
-- -----------------------------------------------------

DELIMITER $$
USE `sabretooth`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_participant_site_for_jurisdiction`( IN proc_jurisdiction_id INT(10) UNSIGNED )
BEGIN
    REPLACE INTO cenozo.participant_site( application_id, participant_id, site_id, default_site_id )
    SELECT application_has_cohort.application_id,
           participant.id,
           IF(
             ISNULL( application_has_participant.preferred_site_id ),
             jurisdiction.site_id,
             application_has_participant.preferred_site_id
           ) AS site_id,
           jurisdiction.site_id AS default_site_id
    FROM cenozo.application_has_cohort
    JOIN cenozo.participant ON application_has_cohort.cohort_id = participant.cohort_id
    LEFT JOIN cenozo.participant_primary_address ON participant.id = participant_primary_address.participant_id
    LEFT JOIN cenozo.address ON participant_primary_address.address_id = address.id
    LEFT JOIN sabretooth.jurisdiction ON address.postcode = jurisdiction.postcode
    LEFT JOIN cenozo.site AS jurisdiction_site ON jurisdiction.site_id = jurisdiction_site.id
    LEFT JOIN cenozo.application_has_participant
      ON application_has_cohort.application_id = application_has_participant.application_id
      AND application_has_participant.participant_id = participant.id
    WHERE jurisdiction.site_id <=> jurisdiction_site.id
    AND application_has_cohort.application_id = 37
    AND application_has_cohort.grouping = 'jurisdiction'
    AND jurisdiction.id = proc_jurisdiction_id;
  END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_site_for_region_site
-- -----------------------------------------------------

DELIMITER $$
USE `sabretooth`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_participant_site_for_region_site`( IN proc_region_site_id INT(10) UNSIGNED )
BEGIN
      REPLACE INTO cenozo.participant_site( application_id, participant_id, site_id, default_site_id )
      SELECT application_has_cohort.application_id,
             participant.id,
             IF(
               ISNULL( application_has_participant.preferred_site_id ),
               region_site.site_id,
               application_has_participant.preferred_site_id
             ) AS site_id,
             region_site.site_id AS default_site_id
      FROM cenozo.application_has_cohort
      JOIN cenozo.participant ON application_has_cohort.cohort_id = participant.cohort_id
      LEFT JOIN cenozo.participant_primary_address ON participant.id = participant_primary_address.participant_id
      LEFT JOIN cenozo.address ON participant_primary_address.address_id = address.id
      LEFT JOIN cenozo.region ON address.region_id = region.id
      LEFT JOIN sabretooth.region_site ON region.id = region_site.region_id
      LEFT JOIN cenozo.site AS region_site_site
        ON region_site.site_id = region_site_site.id
        AND participant.language_id = region_site.language_id
      LEFT JOIN cenozo.application_has_participant
        ON application_has_cohort.application_id = application_has_participant.application_id
        AND application_has_participant.participant_id = participant.id
      WHERE region_site.site_id <=> region_site_site.id
      AND application_has_cohort.application_id = 37
      AND application_has_cohort.grouping = 'region'
      AND region_site.id = proc_region_site_id;
  END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_vacancy_appointment_count
-- -----------------------------------------------------

DELIMITER $$
USE `sabretooth`$$
CREATE DEFINER=`patrick`@`localhost` PROCEDURE `update_vacancy_appointment_count`(IN proc_vacancy_id INT(10) UNSIGNED)
BEGIN
  IF proc_vacancy_id IS NOT NULL THEN
    UPDATE vacancy
    SET appointments = ( SELECT COUNT(*) FROM appointment_has_vacancy WHERE vacancy_id = proc_vacancy_id )
    WHERE id = proc_vacancy_id;
  END IF;
END$$

DELIMITER ;
USE `cenozo`;

DELIMITER $$
USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`address_AFTER_DELETE`
AFTER DELETE ON `cenozo`.`address`
FOR EACH ROW
BEGIN
  IF OLD.alternate_id IS NOT NULL THEN
    CALL update_alternate_first_address( OLD.alternate_id );
  ELSE
    CALL update_participant_first_address( OLD.participant_id );
    CALL update_participant_primary_address( OLD.participant_id );
    CALL contact_changed( OLD.participant_id );
  END IF;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`address_AFTER_INSERT`
AFTER INSERT ON `cenozo`.`address`
FOR EACH ROW
BEGIN
  IF NEW.alternate_id IS NOT NULL THEN
    CALL update_alternate_first_address( NEW.alternate_id );
  ELSE
    CALL update_participant_first_address( NEW.participant_id );
    CALL update_participant_primary_address( NEW.participant_id );
    CALL contact_changed( NEW.participant_id );
  END IF;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`address_AFTER_UPDATE`
AFTER UPDATE ON `cenozo`.`address`
FOR EACH ROW
BEGIN
  IF NEW.alternate_id IS NOT NULL THEN
    CALL update_alternate_first_address( NEW.alternate_id );
  ELSE
    CALL update_participant_first_address( NEW.participant_id );
    CALL update_participant_primary_address( NEW.participant_id );
    CALL contact_changed( NEW.participant_id );
  END IF;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`address_BEFORE_INSERT`
BEFORE INSERT ON `cenozo`.`address`
FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  ELSE
    SET @test = (
      SELECT COUNT(*) FROM address
      WHERE rank = NEW.rank
      AND alternate_id <=> NEW.alternate_id
      AND participant_id <=> NEW.participant_id
    );
    IF @test > 0 THEN
      
      SET @sql = CONCAT(
        "Duplicate entry '",
        IFNULL( NEW.alternate_id, "NULL" ), "-", IFNULL( NEW.participant_id, "NULL" ), "-", NEW.rank,
        "' for key 'uq_alternate_id_participant_id_rank'"
      );
      SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
    END IF;
  END IF;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`address_BEFORE_UPDATE`
BEFORE UPDATE ON `cenozo`.`address`
FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  ELSE
    SET @test = (
      SELECT COUNT(*) FROM address
      WHERE rank = NEW.rank
      AND alternate_id <=> NEW.alternate_id
      AND participant_id <=> NEW.participant_id
      AND address.id != NEW.id
    );
    IF @test > 0 THEN
      
      SET @sql = CONCAT(
        "Duplicate entry '",
        IFNULL( NEW.alternate_id, "NULL" ), "-", IFNULL( NEW.participant_id, "NULL" ), "-", NEW.rank,
        "' for key 'uq_alternate_id_participant_id_rank'"
      );
      SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
    END IF;
  END IF;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`alternate_AFTER_INSERT`
AFTER INSERT ON `cenozo`.`alternate`
FOR EACH ROW
BEGIN
  CALL update_alternate_first_address( NEW.id );
  CALL update_alternate_last_alternate_consents( NEW.id );
  CALL update_alternate_last_written_alternate_consents( NEW.id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`alternate_BEFORE_INSERT`
BEFORE INSERT ON `cenozo`.`alternate`
FOR EACH ROW
BEGIN
  IF NOT NEW.language_id THEN
    SET NEW.language_id = ( SELECT language_id FROM participant WHERE id = NEW.participant_id );
  END IF;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`alternate_consent_AFTER_DELETE`
AFTER DELETE ON `cenozo`.`alternate_consent`
FOR EACH ROW
BEGIN
  CALL update_alternate_last_alternate_consent( OLD.alternate_id, OLD.alternate_consent_type_id );
  CALL update_alternate_last_written_alternate_consent( OLD.alternate_id, OLD.alternate_consent_type_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`alternate_consent_AFTER_INSERT`
AFTER INSERT ON `cenozo`.`alternate_consent`
FOR EACH ROW
BEGIN
  CALL update_alternate_last_alternate_consent( NEW.alternate_id, NEW.alternate_consent_type_id );
  CALL update_alternate_last_written_alternate_consent( NEW.alternate_id, NEW.alternate_consent_type_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`alternate_consent_AFTER_UPDATE`
AFTER UPDATE ON `cenozo`.`alternate_consent`
FOR EACH ROW
BEGIN
  CALL update_alternate_last_alternate_consent( NEW.alternate_id, NEW.alternate_consent_type_id );
  CALL update_alternate_last_written_alternate_consent( NEW.alternate_id, NEW.alternate_consent_type_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`alternate_consent_type_AFTER_INSERT`
AFTER INSERT ON `cenozo`.`alternate_consent_type`
FOR EACH ROW
BEGIN
  INSERT INTO alternate_last_alternate_consent( alternate_id, alternate_consent_type_id, alternate_consent_id )
  SELECT alternate.id, NEW.id, NULL
  FROM alternate;
  INSERT INTO alternate_last_written_alternate_consent( alternate_id, alternate_consent_type_id, alternate_consent_id )
  SELECT alternate.id, NEW.id, NULL
  FROM alternate;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`application_has_participant_AFTER_INSERT`
AFTER INSERT ON `cenozo`.`application_has_participant`
FOR EACH ROW
BEGIN

  IF( NEW.preferred_site_id IS NOT NULL ) THEN
    CALL update_participant_site_for_participant( NEW.participant_id );
  END IF;

END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`application_has_participant_AFTER_UPDATE`
AFTER UPDATE ON `cenozo`.`application_has_participant`
FOR EACH ROW
BEGIN

  IF( NOT NEW.preferred_site_id <=> OLD.preferred_site_id ) THEN
    CALL update_participant_site_for_participant( NEW.participant_id );
  END IF;

END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`application_has_participant_BEFORE_DELETE`
BEFORE DELETE ON `cenozo`.`application_has_participant`
FOR EACH ROW
BEGIN

  IF( OLD.preferred_site_id ) THEN
    DELETE FROM participant_site
    WHERE participant_id = OLD.participant_id;
    CALL update_participant_site_for_participant( OLD.participant_id );
  END IF;

END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`consent_AFTER_DELETE`
AFTER DELETE ON `cenozo`.`consent`
FOR EACH ROW
BEGIN
  CALL update_participant_last_consent( OLD.participant_id, OLD.consent_type_id );
  CALL update_participant_last_written_consent( OLD.participant_id, OLD.consent_type_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`consent_AFTER_INSERT`
AFTER INSERT ON `cenozo`.`consent`
FOR EACH ROW
BEGIN
  CALL update_participant_last_consent( NEW.participant_id, NEW.consent_type_id );
  CALL update_participant_last_written_consent( NEW.participant_id, NEW.consent_type_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`consent_AFTER_UPDATE`
AFTER UPDATE ON `cenozo`.`consent`
FOR EACH ROW
BEGIN
  CALL update_participant_last_consent( NEW.participant_id, NEW.consent_type_id );
  CALL update_participant_last_written_consent( NEW.participant_id, NEW.consent_type_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`consent_BEFORE_DELETE`
BEFORE DELETE ON `cenozo`.`consent`
FOR EACH ROW
BEGIN
  
  SET @test = (
    SELECT consent_type.name
    FROM consent_type
    WHERE id = OLD.consent_type_id );
  IF @test = "participation" THEN
    CALL get_hold_from_consent( OLD.id, @hold_id );
    IF @hold_id IS NOT NULL THEN
      DELETE FROM hold WHERE id = @hold_id;
      CALL remove_duplicate_hold( OLD.participant_id );
    END IF;
  END IF;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`consent_BEFORE_UPDATE`
BEFORE UPDATE ON `cenozo`.`consent`
FOR EACH ROW
BEGIN
  
  SET @test = (
    SELECT consent_type.name
    FROM consent_type
    WHERE id = NEW.consent_type_id );
  IF @test = "participation" THEN
    IF NEW.datetime != OLD.datetime OR NEW.accept != OLD.accept THEN
      CALL get_hold_from_consent( OLD.id, @hold_id );
      IF @hold_id IS NOT NULL THEN
        UPDATE hold, hold_type
        SET hold.datetime = NEW.datetime,
            hold.hold_type_id = IF( NEW.accept, NULL, hold_type.id )
        WHERE hold.id = @hold_id
        AND hold_type.type = "final"
        AND hold_type.name = "Withdrawn";
        CALL remove_duplicate_hold( NEW.participant_id );
      END IF;
    END IF;
  END IF;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`consent_type_AFTER_INSERT`
AFTER INSERT ON `cenozo`.`consent_type`
FOR EACH ROW
BEGIN
  INSERT INTO participant_last_consent( participant_id, consent_type_id, consent_id )
  SELECT participant.id, NEW.id, NULL 
  FROM participant;
  INSERT INTO participant_last_written_consent( participant_id, consent_type_id, consent_id )
  SELECT participant.id, NEW.id, NULL 
  FROM participant;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`event_AFTER_DELETE`
AFTER DELETE ON `cenozo`.`event`
FOR EACH ROW
BEGIN
  CALL update_participant_last_event( OLD.participant_id, OLD.event_type_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`event_AFTER_INSERT`
AFTER INSERT ON `cenozo`.`event`
FOR EACH ROW
BEGIN
  CALL update_participant_last_event( NEW.participant_id, NEW.event_type_id );
  SET @test = ( SELECT record_address FROM event_type WHERE id = NEW.event_type_id );
  IF @test THEN
    INSERT INTO event_address( event_id, address_id, international, address1, address2, city, region_id, postcode )
    SELECT NEW.id, address.id, international, address1, address2, city, region_id, postcode
    FROM participant_primary_address
    JOIN address ON participant_primary_address.address_id = address.id
    WHERE participant_primary_address.participant_id = NEW.participant_id;
  END IF;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`event_AFTER_UPDATE`
AFTER UPDATE ON `cenozo`.`event`
FOR EACH ROW
BEGIN
  CALL update_participant_last_event( NEW.participant_id, NEW.event_type_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`event_type_AFTER_INSERT`
AFTER INSERT ON `cenozo`.`event_type`
FOR EACH ROW
BEGIN
  INSERT INTO participant_last_event( participant_id, event_type_id, event_id )
  SELECT participant.id, NEW.id, NULL 
  FROM participant;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`hin_AFTER_DELETE`
AFTER DELETE ON `cenozo`.`hin`
FOR EACH ROW
BEGIN
  CALL update_participant_last_hin( OLD.participant_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`hin_AFTER_INSERT`
AFTER INSERT ON `cenozo`.`hin`
FOR EACH ROW
BEGIN
  CALL update_participant_last_hin( NEW.participant_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`hin_AFTER_UPDATE`
AFTER UPDATE ON `cenozo`.`hin`
FOR EACH ROW
BEGIN
  CALL update_participant_last_hin( NEW.participant_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`hold_AFTER_DELETE`
AFTER DELETE ON `cenozo`.`hold`
FOR EACH ROW
BEGIN
  CALL update_participant_last_hold( OLD.participant_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`hold_AFTER_INSERT`
AFTER INSERT ON `cenozo`.`hold`
FOR EACH ROW
BEGIN
  CALL update_participant_last_hold( NEW.participant_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`hold_AFTER_UPDATE`
AFTER UPDATE ON `cenozo`.`hold`
FOR EACH ROW
BEGIN
  CALL update_participant_last_hold( NEW.participant_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`hold_BEFORE_INSERT`
BEFORE INSERT ON `cenozo`.`hold`
FOR EACH ROW
BEGIN
  
  SET @hold_type = NULL;
  SELECT hold_type.type INTO @hold_type
  FROM hold_type
  WHERE id = NEW.hold_type_id;

  SELECT exclusion_id, hold_type.type, hold_type.id INTO @exclusion_id, @last_hold_type, @last_hold_type_id
  FROM participant
  JOIN participant_last_hold ON participant.id = participant_last_hold.participant_id
  LEFT JOIN hold ON participant_last_hold.hold_id = hold.id
  LEFT JOIN hold_type ON hold.hold_type_id = hold_type.id
  WHERE participant.id = NEW.participant_id;

  IF ( @exclusion_id IS NOT NULL ) THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = "Cannot add row: participant.excluded_id is not null";
  ELSE
    IF ( NEW.hold_type_id <=> @last_hold_type_id ) OR
       ( @hold_type IS NOT NULL AND 'final' != @hold_type AND 'final' <=> @last_hold_type ) THEN
      SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = "Cannot add row: conflict with last hold type";
    END IF;
  END IF;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`note_BEFORE_INSERT`
BEFORE INSERT ON `cenozo`.`note`
FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or 
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN 
    
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  END IF;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`note_BEFORE_UPDATE`
BEFORE UPDATE ON `cenozo`.`note`
FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or 
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN 
    
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  END IF;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`participant_AFTER_INSERT`
AFTER INSERT ON `cenozo`.`participant`
FOR EACH ROW
BEGIN
  CALL update_participant_site_for_participant( NEW.id );
  CALL update_participant_first_address( NEW.id );
  CALL update_participant_primary_address( NEW.id );
  CALL update_participant_last_consents( NEW.id );
  CALL update_participant_last_written_consents( NEW.id );
  CALL update_participant_last_events( NEW.id );
  CALL update_participant_last_hin( NEW.id );
  CALL update_participant_last_hold( NEW.id );
  CALL update_participant_last_proxy( NEW.id );
  CALL update_participant_last_trace( NEW.id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`remove_uid_from_pool`
BEFORE INSERT ON `cenozo`.`participant`
FOR EACH ROW
BEGIN
  DELETE FROM unique_identifier_pool WHERE uid = new.uid;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`participant_primary_address_AFTER_DELETE`
AFTER DELETE ON `cenozo`.`participant_primary_address`
FOR EACH ROW
BEGIN
  CALL update_participant_site_for_participant( OLD.participant_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`participant_primary_address_AFTER_INSERT`
AFTER INSERT ON `cenozo`.`participant_primary_address`
FOR EACH ROW
BEGIN
  CALL update_participant_site_for_participant( NEW.participant_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`participant_primary_address_AFTER_UPDATE`
AFTER UPDATE ON `cenozo`.`participant_primary_address`
FOR EACH ROW
BEGIN
  CALL update_participant_site_for_participant( NEW.participant_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`participant_primary_address_BEFORE_DELETE`
BEFORE DELETE ON `cenozo`.`participant_primary_address`
FOR EACH ROW
BEGIN
  DELETE FROM participant_site
  WHERE participant_id = OLD.participant_id;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`phone_AFTER_DELETE`
AFTER DELETE ON `cenozo`.`phone`
FOR EACH ROW
BEGIN
  IF OLD.participant_id IS NOT NULL THEN
    CALL contact_changed( OLD.participant_id );
  END IF;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`phone_AFTER_INSERT`
AFTER INSERT ON `cenozo`.`phone`
FOR EACH ROW
BEGIN
  IF NEW.participant_id IS NOT NULL THEN
    CALL contact_changed( NEW.participant_id );
  END IF;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`phone_AFTER_UPDATE`
AFTER UPDATE ON `cenozo`.`phone`
FOR EACH ROW
BEGIN
  IF NEW.participant_id IS NOT NULL THEN
    CALL contact_changed( NEW.participant_id );
  END IF;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`phone_BEFORE_INSERT`
BEFORE INSERT ON `cenozo`.`phone`
FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  ELSE
    SET @test = (
      SELECT COUNT(*) FROM phone
      WHERE rank = NEW.rank
      AND alternate_id <=> NEW.alternate_id
      AND participant_id <=> NEW.participant_id
    );
    IF @test > 0 THEN
      
      SET @sql = CONCAT(
        "Duplicate entry '",
        IFNULL( NEW.alternate_id, "NULL" ), "-", IFNULL( NEW.participant_id, "NULL" ), "-", NEW.rank,
        "' for key 'uq_alternate_id_participant_id_rank'"
      );
      SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
    END IF;
  END IF;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`phone_BEFORE_UPDATE`
BEFORE UPDATE ON `cenozo`.`phone`
FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  ELSE
    SET @test = (
      SELECT COUNT(*) FROM phone
      WHERE rank = NEW.rank
      AND alternate_id <=> NEW.alternate_id
      AND participant_id <=> NEW.participant_id
      AND phone.id != NEW.id
    );
    IF @test > 0 THEN
      
      SET @sql = CONCAT(
        "Duplicate entry '",
        IFNULL( NEW.alternate_id, "NULL" ), "-", IFNULL( NEW.participant_id, "NULL" ), "-", NEW.rank,
        "' for key 'uq_alternate_id_participant_id_rank'"
      );
      SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
    END IF;
  END IF;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`proxy_AFTER_DELETE`
AFTER DELETE ON `cenozo`.`proxy`
FOR EACH ROW
BEGIN
  CALL update_participant_last_proxy( OLD.participant_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`proxy_AFTER_INSERT`
AFTER INSERT ON `cenozo`.`proxy`
FOR EACH ROW
BEGIN
  CALL update_participant_last_proxy( NEW.participant_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`proxy_AFTER_UPDATE`
AFTER UPDATE ON `cenozo`.`proxy`
FOR EACH ROW
BEGIN
  CALL update_participant_last_proxy( NEW.participant_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`proxy_BEFORE_INSERT`
BEFORE INSERT ON `cenozo`.`proxy`
FOR EACH ROW
BEGIN
  
  SET @proxy_type = NULL;
  SELECT proxy_type.name INTO @proxy_type
  FROM proxy_type
  WHERE id = NEW.proxy_type_id;

  SELECT exclusion_id, hold_type.type, proxy_type.name INTO @exclusion_id, @last_hold_type, @last_proxy_type
  FROM participant
  JOIN participant_last_hold ON participant.id = participant_last_hold.participant_id
  LEFT JOIN hold ON participant_last_hold.hold_id = hold.id
  LEFT JOIN hold_type ON hold.hold_type_id = hold_type.id
  JOIN participant_last_proxy ON participant.id = participant_last_proxy.participant_id
  LEFT JOIN proxy ON participant_last_proxy.proxy_id = proxy.id
  LEFT JOIN proxy_type ON proxy.proxy_type_id = proxy_type.id
  WHERE participant.id = NEW.participant_id;

  IF ( @exclusion_id IS NOT NULL ) THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = "Cannot add row: participant.excluded_id is not null";
  ELSE
    IF ( 'final' <=> @last_hold_type ) THEN
      SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = "Cannot add row: participant's last hold is final";
       ELSE
      IF ( @proxy_type <=> @last_proxy_type ) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = "Cannot add row: conflict with last proxy type";
      END IF;
    END IF;
  END IF;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`script_BEFORE_INSERT`
BEFORE INSERT ON `cenozo`.`script`
FOR EACH ROW
BEGIN
  IF ( NEW.sid IS NULL AND NEW.pine_qnaire_id IS NULL ) or
     ( NEW.sid IS NOT NULL AND NEW.pine_qnaire_id IS NOT NULL ) THEN
    
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'sid' or 'pine_qnaire_id' cannot be null",
    MYSQL_ERRNO = 1048;
  END IF;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`script_BEFORE_UPDATE`
BEFORE UPDATE ON `cenozo`.`script`
FOR EACH ROW
BEGIN
  IF ( NEW.sid IS NULL AND NEW.pine_qnaire_id IS NULL ) or
     ( NEW.sid IS NOT NULL AND NEW.pine_qnaire_id IS NOT NULL ) THEN
    
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'sid' or 'pine_qnaire_id' cannot be null",
    MYSQL_ERRNO = 1048;
  END IF;
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`search_AFTER_INSERT`
AFTER INSERT ON `cenozo`.`search`
FOR EACH ROW
BEGIN

  REPLACE INTO search_result( create_timestamp, search_id, participant_id, record_id, subject, column_name, value )

  SELECT NULL, NEW.id, participant.id, participant.id, "participant", "honorific", participant.honorific
  FROM participant 
  WHERE honorific LIKE NEW.word

  UNION SELECT NULL, NEW.id, participant.id, participant.id, "participant", "first_name", participant.first_name
  FROM participant WHERE first_name LIKE NEW.word

  UNION SELECT NULL, NEW.id, participant.id, participant.id, "participant", "other_name", participant.other_name
  FROM participant WHERE other_name LIKE NEW.word

  UNION SELECT NULL, NEW.id, participant.id, participant.id, "participant", "last_name", participant.last_name
  FROM participant WHERE last_name LIKE NEW.word

  UNION SELECT NULL, NEW.id, participant.id, participant.id, "participant", "date_of_birth", participant.date_of_birth
  FROM participant WHERE date_of_birth LIKE NEW.word

  UNION SELECT NULL, NEW.id, participant.id, participant.id, "participant", "email", participant.email
  FROM participant WHERE email LIKE NEW.word

  UNION SELECT NULL, NEW.id, alternate.participant_id, alternate.id, "alternate", "first_name", alternate.first_name
  FROM alternate WHERE first_name LIKE NEW.word

  UNION SELECT NULL, NEW.id, alternate.participant_id, alternate.id, "alternate", "last_name", alternate.last_name
  FROM alternate WHERE last_name LIKE NEW.word

  UNION SELECT NULL, NEW.id, alternate.participant_id, alternate.id, "alternate", "association", alternate.association
  FROM alternate WHERE association LIKE NEW.word

  UNION SELECT NULL, NEW.id, consent.participant_id, consent.id, "consent", "note",
    IF( CHAR_LENGTH( note ) > 255, CONCAT( SUBSTRING( note, 1, 252 ), "..." ), note ) 
  FROM consent WHERE note LIKE NEW.word

  UNION SELECT NULL, NEW.id, hin.participant_id, hin.id, "hin", "code", hin.code
  FROM hin WHERE code LIKE NEW.word

  UNION SELECT NULL, NEW.id, address.participant_id, address.id, "address", "address1",
    IF( CHAR_LENGTH( address1 ) > 255, CONCAT( SUBSTRING( address1, 1, 252 ), "..." ), address1 ) 
  FROM address WHERE address1 LIKE NEW.word AND participant_id IS NOT NULL

  UNION SELECT NULL, NEW.id, alternate.participant_id, address.id, "address", "address1",
    IF( CHAR_LENGTH( address1 ) > 255, CONCAT( SUBSTRING( address1, 1, 252 ), "..." ), address1 ) 
  FROM address 
  JOIN alternate ON address.alternate_id = alternate.id 
  WHERE address1 LIKE NEW.word

  UNION SELECT NULL, NEW.id, address.participant_id, address.id, "address", "address2",
    IF( CHAR_LENGTH( address2 ) > 255, CONCAT( SUBSTRING( address2, 1, 252 ), "..." ), address2 ) 
  FROM address WHERE address2 LIKE NEW.word AND participant_id IS NOT NULL

  UNION SELECT NULL, NEW.id, alternate.participant_id, address.id, "address", "address2",
    IF( CHAR_LENGTH( address2 ) > 255, CONCAT( SUBSTRING( address2, 1, 252 ), "..." ), address2 ) 
  FROM address 
  JOIN alternate ON address.alternate_id = alternate.id 
  WHERE address2 LIKE NEW.word

  UNION SELECT NULL, NEW.id, address.participant_id, address.id, "address", "city", address.city
  FROM address WHERE city LIKE NEW.word AND participant_id IS NOT NULL

  UNION SELECT NULL, NEW.id, alternate.participant_id, address.id, "address", "city", address.city
  FROM address 
  JOIN alternate ON address.alternate_id = alternate.id 
  WHERE city LIKE NEW.word

  UNION SELECT NULL, NEW.id, address.participant_id, address.id, "address", "postcode", address.postcode
  FROM address WHERE postcode LIKE NEW.word AND participant_id IS NOT NULL

  UNION SELECT NULL, NEW.id, alternate.participant_id, address.id, "address", "postcode", address.postcode
  FROM address 
  JOIN alternate ON address.alternate_id = alternate.id 
  WHERE postcode LIKE NEW.word

  UNION SELECT NULL, NEW.id, address.participant_id, address.id, "address", "note",
    IF( CHAR_LENGTH( note ) > 255, CONCAT( SUBSTRING( note, 1, 252 ), "..." ), note ) 
  FROM address WHERE note LIKE NEW.word AND participant_id IS NOT NULL

  UNION SELECT NULL, NEW.id, alternate.participant_id, address.id, "address", "note",
    IF( CHAR_LENGTH( note ) > 255, CONCAT( SUBSTRING( note, 1, 252 ), "..." ), note ) 
  FROM address 
  JOIN alternate ON address.alternate_id = alternate.id 
  WHERE note LIKE NEW.word

  UNION SELECT NULL, NEW.id, phone.participant_id, phone.id, "phone", "number", phone.number
  FROM phone WHERE number LIKE NEW.word AND participant_id IS NOT NULL

  UNION SELECT NULL, NEW.id, alternate.participant_id, phone.id, "phone", "number", phone.number
  FROM phone 
  JOIN alternate ON phone.alternate_id = alternate.id 
  WHERE number LIKE NEW.word

  UNION SELECT NULL, NEW.id, phone.participant_id, phone.id, "phone", "note",
    IF( CHAR_LENGTH( note ) > 255, CONCAT( SUBSTRING( note, 1, 252 ), "..." ), note ) 
  FROM phone WHERE note LIKE NEW.word AND participant_id IS NOT NULL

  UNION SELECT NULL, NEW.id, alternate.participant_id, phone.id, "phone", "note",
    IF( CHAR_LENGTH( note ) > 255, CONCAT( SUBSTRING( note, 1, 252 ), "..." ), note ) 
  FROM phone 
  JOIN alternate ON phone.alternate_id = alternate.id 
  WHERE note LIKE NEW.word

  UNION SELECT NULL, NEW.id, note.participant_id, note.id, "note", "note",
    IF( CHAR_LENGTH( note ) > 255, CONCAT( SUBSTRING( note, 1, 252 ), "..." ), note ) 
  FROM note WHERE note LIKE NEW.word AND participant_id IS NOT NULL

  UNION SELECT NULL, NEW.id, alternate.participant_id, note.id, "note", "note",
    IF( CHAR_LENGTH( note ) > 255, CONCAT( SUBSTRING( note, 1, 252 ), "..." ), note ) 
  FROM note 
  JOIN alternate ON note.alternate_id = alternate.id 
  WHERE note LIKE NEW.word

  UNION SELECT NULL, NEW.id, event.participant_id, event_address.id, "event_address", "address1",
    IF( CHAR_LENGTH( address1 ) > 255, CONCAT( SUBSTRING( address1, 1, 252 ), "..." ), address1 ) 
  FROM event_address 
  JOIN event ON event_address.event_id = event.id 
  WHERE address1 LIKE NEW.word

  UNION SELECT NULL, NEW.id, event.participant_id, event_address.id, "event_address", "address2",
    IF( CHAR_LENGTH( address2 ) > 255, CONCAT( SUBSTRING( address2, 1, 252 ), "..." ), address2 ) 
  FROM event_address 
  JOIN event ON event_address.event_id = event.id 
  WHERE address2 LIKE NEW.word

  UNION SELECT NULL, NEW.id, event.participant_id, event_address.id, "event_address", "city", event_address.city
  FROM event_address 
  JOIN event ON event_address.event_id = event.id 
  WHERE city LIKE NEW.word

  UNION SELECT NULL, NEW.id, event.participant_id, event_address.id, "event_address", "postcode", event_address.postcode
  FROM event_address 
  JOIN event ON event_address.event_id = event.id 
  WHERE postcode LIKE NEW.word;

END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`trace_AFTER_DELETE`
AFTER DELETE ON `cenozo`.`trace`
FOR EACH ROW
BEGIN
  CALL update_participant_last_trace( OLD.participant_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`trace_AFTER_INSERT`
AFTER INSERT ON `cenozo`.`trace`
FOR EACH ROW
BEGIN
  CALL update_participant_last_trace( NEW.participant_id );
END$$

USE `cenozo`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `cenozo`.`trace_AFTER_UPDATE`
AFTER UPDATE ON `cenozo`.`trace`
FOR EACH ROW
BEGIN
  CALL update_participant_last_trace( NEW.participant_id );
END$$


DELIMITER ;
USE `sabretooth`;

DELIMITER $$
USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`appointment_AFTER_DELETE`
AFTER DELETE ON `sabretooth`.`appointment`
FOR EACH ROW
BEGIN
  CALL update_interview_last_appointment( OLD.interview_id );
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`appointment_AFTER_INSERT`
AFTER INSERT ON `sabretooth`.`appointment`
FOR EACH ROW
BEGIN
  CALL update_interview_last_appointment( NEW.interview_id );
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`appointment_AFTER_UPDATE`
AFTER UPDATE ON `sabretooth`.`appointment`
FOR EACH ROW
BEGIN
  CALL update_interview_last_appointment( NEW.interview_id );
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`appointment_BEFORE_DELETE`
BEFORE DELETE ON `sabretooth`.`appointment`
FOR EACH ROW
BEGIN
  DELETE FROM appointment_has_vacancy WHERE appointment_id = OLD.id;
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`appointment_has_vacancy_AFTER_DELETE`
AFTER DELETE ON `sabretooth`.`appointment_has_vacancy`
FOR EACH ROW
BEGIN
  CALL update_vacancy_appointment_count( OLD.vacancy_id );
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`appointment_has_vacancy_AFTER_INSERT`
AFTER INSERT ON `sabretooth`.`appointment_has_vacancy`
FOR EACH ROW
BEGIN
  CALL update_vacancy_appointment_count( NEW.vacancy_id );
  CALL update_appointment_vacancies( NEW.appointment_id );
END$$

USE `sabretooth`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sabretooth`.`appointment_mail_BEFORE_INSERT` BEFORE INSERT ON `appointment_mail` FOR EACH ROW
BEGIN
  IF( "immediately" = NEW.delay_unit AND NEW.delay_offset IS NOT NULL ) THEN
    SET NEW.delay_offset = NULL;
  ELSE
    IF( "immediately" != NEW.delay_unit AND NEW.delay_offset IS NULL ) THEN
      SET NEW.delay_offset = 1;
    END IF;
  END IF;
END$$

USE `sabretooth`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sabretooth`.`appointment_mail_BEFORE_UPDATE` BEFORE UPDATE ON `appointment_mail` FOR EACH ROW
BEGIN
  IF( "immediately" = NEW.delay_unit AND NEW.delay_offset IS NOT NULL ) THEN
    SET NEW.delay_offset = NULL;
  ELSE
    IF( "immediately" != NEW.delay_unit AND NEW.delay_offset IS NULL ) THEN
      SET NEW.delay_offset = 1;
    END IF;
  END IF;
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`assignment_AFTER_DELETE`
AFTER DELETE ON `sabretooth`.`assignment`
FOR EACH ROW
BEGIN
  CALL update_interview_last_assignment( OLD.interview_id );
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`assignment_AFTER_INSERT`
AFTER INSERT ON `sabretooth`.`assignment`
FOR EACH ROW
BEGIN
  CALL update_interview_last_assignment( NEW.interview_id );
  CALL update_assignment_last_phone_call( NEW.id );
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`assignment_AFTER_UPDATE`
AFTER UPDATE ON `sabretooth`.`assignment`
FOR EACH ROW
BEGIN
  CALL update_interview_last_assignment( NEW.interview_id );
  CALL update_assignment_last_phone_call( NEW.id );
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`interview_AFTER_DELETE`
AFTER DELETE ON `sabretooth`.`interview`
FOR EACH ROW
BEGIN
  CALL update_participant_last_interview( OLD.participant_id );
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`interview_AFTER_INSERT`
AFTER INSERT ON `sabretooth`.`interview`
FOR EACH ROW
BEGIN
  CALL update_participant_last_interview( NEW.participant_id );
  CALL update_interview_last_assignment( NEW.id );
  CALL update_interview_last_appointment( NEW.id );
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`interview_AFTER_UPDATE`
AFTER UPDATE ON `sabretooth`.`interview`
FOR EACH ROW
BEGIN
  IF OLD.start_datetime != NEW.start_datetime THEN
    CALL update_participant_last_interview( NEW.participant_id );
    CALL update_interview_last_assignment( NEW.id );
  END IF;
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`jurisdiction_AFTER_DELETE`
AFTER DELETE ON `sabretooth`.`jurisdiction`
FOR EACH ROW
BEGIN
  CALL update_participant_site_for_jurisdiction( OLD.id );
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`jurisdiction_AFTER_INSERT`
AFTER INSERT ON `sabretooth`.`jurisdiction`
FOR EACH ROW
BEGIN
  CALL update_participant_site_for_jurisdiction( NEW.id );
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`jurisdiction_AFTER_UPDATE`
AFTER UPDATE ON `sabretooth`.`jurisdiction`
FOR EACH ROW
BEGIN
  CALL update_participant_site_for_jurisdiction( NEW.id );
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`jurisdiction_BEFORE_DELETE`
BEFORE DELETE ON `sabretooth`.`jurisdiction`
FOR EACH ROW
BEGIN
  DELETE FROM participant_site
  WHERE site_id = OLD.site_id;
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`phone_call_AFTER_DELETE`
AFTER DELETE ON `sabretooth`.`phone_call`
FOR EACH ROW
BEGIN
  CALL update_assignment_last_phone_call( OLD.assignment_id );
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`phone_call_AFTER_INSERT`
AFTER INSERT ON `sabretooth`.`phone_call`
FOR EACH ROW
BEGIN
  CALL update_assignment_last_phone_call( NEW.assignment_id );
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`phone_call_AFTER_UPDATE`
AFTER UPDATE ON `sabretooth`.`phone_call`
FOR EACH ROW
BEGIN
  CALL update_assignment_last_phone_call( NEW.assignment_id );
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`region_site_AFTER_DELETE`
AFTER DELETE ON `sabretooth`.`region_site`
FOR EACH ROW
BEGIN
  CALL update_participant_site_for_region_site( OLD.id );
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`region_site_AFTER_INSERT`
AFTER INSERT ON `sabretooth`.`region_site`
FOR EACH ROW
BEGIN
  CALL update_participant_site_for_region_site( NEW.id );
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`region_site_AFTER_UPDATE`
AFTER UPDATE ON `sabretooth`.`region_site`
FOR EACH ROW
BEGIN
  CALL update_participant_site_for_region_site( NEW.id );
END$$

USE `sabretooth`$$
CREATE
DEFINER=`patrick`@`localhost`
TRIGGER `sabretooth`.`region_site_BEFORE_DELETE`
BEFORE DELETE ON `sabretooth`.`region_site`
FOR EACH ROW
BEGIN
  DELETE FROM participant_site
  WHERE site_id = OLD.site_id;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
